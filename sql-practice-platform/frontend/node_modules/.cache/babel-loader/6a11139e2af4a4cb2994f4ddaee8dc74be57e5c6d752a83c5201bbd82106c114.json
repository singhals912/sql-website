{"ast":null,"code":"import _objectSpread from\"/Users/ss/Downloads/Code/Vibe_coding/SQL_practice_website/sql-practice-platform/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useAuth}from'../contexts/AuthContext';import ProgressService from'./progressService';class LearningPathService{// Get headers with authentication\nstatic getHeaders(){let token=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;const headers={'Content-Type':'application/json','X-Session-ID':ProgressService.sessionId};if(token){headers['Authorization']=\"Bearer \".concat(token);}return headers;}// Get all learning paths\nstatic async getLearningPaths(){try{const response=await fetch(\"\".concat(this.baseURL,\"/learning-paths\"));const data=await response.json();// Handle both direct array response and wrapped response\nif(Array.isArray(data)){return data;}else if(data.success&&data.learningPaths){return data.learningPaths;}else{throw new Error(data.error||'Failed to fetch learning paths');}}catch(error){console.error('Error fetching learning paths:',error);throw error;}}// Get specific learning path with steps\nstatic async getLearningPath(pathId){try{const response=await fetch(\"\".concat(this.baseURL,\"/learning-paths/\").concat(pathId));const data=await response.json();// Handle direct response format from updated API\nif(data.error){throw new Error(data.error);}else if(data.title&&data.problems){// Convert 'problems' to 'steps' for frontend compatibility\nreturn _objectSpread(_objectSpread({},data),{},{steps:data.problems.map(problem=>_objectSpread(_objectSpread({},problem),{},{problem_numeric_id:problem.numeric_id,step_order:problem.stepOrder}))});}else{throw new Error('Failed to fetch learning path');}}catch(error){console.error('Error fetching learning path:',error);throw error;}}// Start a learning path (for authenticated users)\nstatic async startLearningPath(pathId,token){try{const response=await fetch(\"\".concat(this.baseURL,\"/learning-paths/\").concat(pathId,\"/start\"),{method:'POST',headers:this.getHeaders(token)});const data=await response.json();if(data.success){return data.progress;}else{throw new Error(data.error||'Failed to start learning path');}}catch(error){console.error('Error starting learning path:',error);throw error;}}// Get user progress for learning paths\nstatic async getUserProgress(token){try{const response=await fetch(\"\".concat(this.baseURL,\"/learning-paths/progress\"),{headers:this.getHeaders(token)});const data=await response.json();if(data.success){return data.progress;}else{throw new Error(data.error||'Failed to fetch progress');}}catch(error){console.error('Error fetching learning path progress:',error);throw error;}}// Update step completion\nstatic async updateStepCompletion(pathId,stepId,completed,token){try{const response=await fetch(\"\".concat(this.baseURL,\"/learning-paths/\").concat(pathId,\"/steps/\").concat(stepId),{method:'PUT',headers:this.getHeaders(token),body:JSON.stringify({completed})});const data=await response.json();if(data.success){return data.progress;}else{throw new Error(data.error||'Failed to update step');}}catch(error){console.error('Error updating step completion:',error);throw error;}}// Get recommended learning paths based on user's progress\nstatic async getRecommendations(token){try{const response=await fetch(\"\".concat(this.baseURL,\"/learning-paths/recommendations\"),{headers:this.getHeaders(token)});const data=await response.json();if(data.success){return data.recommendations;}else{return[];// Return empty array if no recommendations\n}}catch(error){console.error('Error fetching recommendations:',error);return[];}}// Get learning path statistics\nstatic async getStatistics(){try{const response=await fetch(\"\".concat(this.baseURL,\"/learning-paths/statistics\"));const data=await response.json();if(data.success){return data.statistics;}else{return null;}}catch(error){console.error('Error fetching learning path statistics:',error);return null;}}}LearningPathService.baseURL='http://localhost:5001/api';export default LearningPathService;","map":{"version":3,"names":["useAuth","ProgressService","LearningPathService","getHeaders","token","arguments","length","undefined","headers","sessionId","concat","getLearningPaths","response","fetch","baseURL","data","json","Array","isArray","success","learningPaths","Error","error","console","getLearningPath","pathId","title","problems","_objectSpread","steps","map","problem","problem_numeric_id","numeric_id","step_order","stepOrder","startLearningPath","method","progress","getUserProgress","updateStepCompletion","stepId","completed","body","JSON","stringify","getRecommendations","recommendations","getStatistics","statistics"],"sources":["/Users/ss/Downloads/Code/Vibe_coding/SQL_practice_website/sql-practice-platform/frontend/src/services/learningPathService.js"],"sourcesContent":["import { useAuth } from '../contexts/AuthContext';\nimport ProgressService from './progressService';\n\nclass LearningPathService {\n  static baseURL = 'http://localhost:5001/api';\n\n  // Get headers with authentication\n  static getHeaders(token = null) {\n    const headers = {\n      'Content-Type': 'application/json',\n      'X-Session-ID': ProgressService.sessionId,\n    };\n\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    return headers;\n  }\n\n  // Get all learning paths\n  static async getLearningPaths() {\n    try {\n      const response = await fetch(`${this.baseURL}/learning-paths`);\n      const data = await response.json();\n      \n      // Handle both direct array response and wrapped response\n      if (Array.isArray(data)) {\n        return data;\n      } else if (data.success && data.learningPaths) {\n        return data.learningPaths;\n      } else {\n        throw new Error(data.error || 'Failed to fetch learning paths');\n      }\n    } catch (error) {\n      console.error('Error fetching learning paths:', error);\n      throw error;\n    }\n  }\n\n  // Get specific learning path with steps\n  static async getLearningPath(pathId) {\n    try {\n      const response = await fetch(`${this.baseURL}/learning-paths/${pathId}`);\n      const data = await response.json();\n      \n      // Handle direct response format from updated API\n      if (data.error) {\n        throw new Error(data.error);\n      } else if (data.title && data.problems) {\n        // Convert 'problems' to 'steps' for frontend compatibility\n        return {\n          ...data,\n          steps: data.problems.map(problem => ({\n            ...problem,\n            problem_numeric_id: problem.numeric_id,\n            step_order: problem.stepOrder\n          }))\n        };\n      } else {\n        throw new Error('Failed to fetch learning path');\n      }\n    } catch (error) {\n      console.error('Error fetching learning path:', error);\n      throw error;\n    }\n  }\n\n  // Start a learning path (for authenticated users)\n  static async startLearningPath(pathId, token) {\n    try {\n      const response = await fetch(`${this.baseURL}/learning-paths/${pathId}/start`, {\n        method: 'POST',\n        headers: this.getHeaders(token)\n      });\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        return data.progress;\n      } else {\n        throw new Error(data.error || 'Failed to start learning path');\n      }\n    } catch (error) {\n      console.error('Error starting learning path:', error);\n      throw error;\n    }\n  }\n\n  // Get user progress for learning paths\n  static async getUserProgress(token) {\n    try {\n      const response = await fetch(`${this.baseURL}/learning-paths/progress`, {\n        headers: this.getHeaders(token)\n      });\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        return data.progress;\n      } else {\n        throw new Error(data.error || 'Failed to fetch progress');\n      }\n    } catch (error) {\n      console.error('Error fetching learning path progress:', error);\n      throw error;\n    }\n  }\n\n  // Update step completion\n  static async updateStepCompletion(pathId, stepId, completed, token) {\n    try {\n      const response = await fetch(`${this.baseURL}/learning-paths/${pathId}/steps/${stepId}`, {\n        method: 'PUT',\n        headers: this.getHeaders(token),\n        body: JSON.stringify({ completed })\n      });\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        return data.progress;\n      } else {\n        throw new Error(data.error || 'Failed to update step');\n      }\n    } catch (error) {\n      console.error('Error updating step completion:', error);\n      throw error;\n    }\n  }\n\n  // Get recommended learning paths based on user's progress\n  static async getRecommendations(token) {\n    try {\n      const response = await fetch(`${this.baseURL}/learning-paths/recommendations`, {\n        headers: this.getHeaders(token)\n      });\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        return data.recommendations;\n      } else {\n        return []; // Return empty array if no recommendations\n      }\n    } catch (error) {\n      console.error('Error fetching recommendations:', error);\n      return [];\n    }\n  }\n\n  // Get learning path statistics\n  static async getStatistics() {\n    try {\n      const response = await fetch(`${this.baseURL}/learning-paths/statistics`);\n      const data = await response.json();\n      \n      if (data.success) {\n        return data.statistics;\n      } else {\n        return null;\n      }\n    } catch (error) {\n      console.error('Error fetching learning path statistics:', error);\n      return null;\n    }\n  }\n}\n\nexport default LearningPathService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}