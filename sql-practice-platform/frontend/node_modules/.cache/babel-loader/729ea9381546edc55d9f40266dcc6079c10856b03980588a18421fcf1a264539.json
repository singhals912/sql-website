{"ast":null,"code":"// SQL formatting utilities for consistent display across the website\n/**\n * Formats SQL queries for display with consistent styling\n * @param {string} sql - The SQL query to format\n * @param {Object} options - Formatting options\n * @returns {string} - Formatted SQL query\n */export const formatSQLForDisplay=function(sql){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const{uppercase=true,// Convert keywords to uppercase\naddSemicolon=true,// Ensure query ends with semicolon\nindentSize=2,// Number of spaces for indentation\nlineBreaks=false// Add line breaks for readability\n}=options;if(!sql||typeof sql!=='string'){return'';}let formatted=sql.trim();// SQL keywords to uppercase (if enabled)\nif(uppercase){const keywords=['SELECT','FROM','WHERE','JOIN','INNER','LEFT','RIGHT','FULL','OUTER','ON','GROUP','BY','HAVING','ORDER','LIMIT','OFFSET','DISTINCT','COUNT','SUM','AVG','MIN','MAX','AS','AND','OR','NOT','IN','LIKE','BETWEEN','IS','NULL','EXISTS','CASE','WHEN','THEN','ELSE','END','UNION','ALL','INSERT','INTO','VALUES','UPDATE','SET','DELETE','CREATE','ALTER','DROP','TABLE','INDEX','PRIMARY','KEY','FOREIGN','REFERENCES','CONSTRAINT','CHECK','DEFAULT','UNIQUE','AUTO_INCREMENT','WITH','RECURSIVE','OVER','PARTITION','ROW_NUMBER','RANK','DENSE_RANK'];keywords.forEach(keyword=>{const regex=new RegExp(\"\\\\b\".concat(keyword,\"\\\\b\"),'gi');formatted=formatted.replace(regex,keyword);});}// Add consistent spacing\nformatted=formatted.replace(/\\s+/g,' ')// Multiple spaces to single space\n.replace(/,\\s*/g,', ')// Standardize comma spacing\n.replace(/\\(\\s+/g,'(')// Remove space after opening parenthesis\n.replace(/\\s+\\)/g,')')// Remove space before closing parenthesis\n.replace(/\\s*=\\s*/g,' = ')// Standardize equals spacing\n.replace(/\\s*<\\s*/g,' < ')// Standardize less than spacing\n.replace(/\\s*>\\s*/g,' > ')// Standardize greater than spacing\n.replace(/\\s*<=\\s*/g,' <= ')// Standardize less than or equal spacing\n.replace(/\\s*>=\\s*/g,' >= ')// Standardize greater than or equal spacing\n.replace(/\\s*!=\\s*/g,' != ')// Standardize not equal spacing\n.trim();// Add line breaks for readability (if enabled)\nif(lineBreaks){const indent=' '.repeat(indentSize);formatted=formatted.replace(/\\bFROM\\b/gi,'\\nFROM').replace(/\\bWHERE\\b/gi,'\\nWHERE').replace(/\\bJOIN\\b/gi,'\\nJOIN').replace(/\\bINNER JOIN\\b/gi,'\\nINNER JOIN').replace(/\\bLEFT JOIN\\b/gi,'\\nLEFT JOIN').replace(/\\bRIGHT JOIN\\b/gi,'\\nRIGHT JOIN').replace(/\\bFULL JOIN\\b/gi,'\\nFULL JOIN').replace(/\\bGROUP BY\\b/gi,'\\nGROUP BY').replace(/\\bHAVING\\b/gi,'\\nHAVING').replace(/\\bORDER BY\\b/gi,'\\nORDER BY').replace(/\\bLIMIT\\b/gi,'\\nLIMIT').replace(/\\n/g,'\\n'+indent).trim();}// Add semicolon if missing (if enabled)\nif(addSemicolon&&!formatted.endsWith(';')){formatted+=';';}return formatted;};/**\n * Normalizes SQL queries for comparison (used in validation)\n * @param {string} sql - The SQL query to normalize\n * @returns {string} - Normalized SQL query\n */export const normalizeSQLForComparison=sql=>{if(!sql||typeof sql!=='string'){return'';}return sql.trim().toLowerCase().replace(/\\s+/g,' ')// Multiple spaces to single space\n.replace(/;\\s*$/,'')// Remove trailing semicolon\n.replace(/,\\s+/g,', ')// Standardize comma spacing\n.replace(/\\(\\s+/g,'(')// Remove space after opening parenthesis\n.replace(/\\s+\\)/g,')')// Remove space before closing parenthesis\n.trim();};/**\n * Validates if two SQL queries are equivalent\n * @param {string} userQuery - User's SQL query\n * @param {string} expectedQuery - Expected SQL query\n * @returns {boolean} - True if queries are equivalent\n */export const validateSQLEquivalence=(userQuery,expectedQuery)=>{const userNormalized=normalizeSQLForComparison(userQuery);const expectedNormalized=normalizeSQLForComparison(expectedQuery);const expectedNoSemicolon=normalizeSQLForComparison(expectedQuery.replace(/;$/,''));return userNormalized===expectedNormalized||userNormalized===expectedNoSemicolon;};/**\n * Gets SQL formatting options for different contexts\n */export const SQL_FORMAT_PRESETS={// For display in code blocks and examples\ndisplay:{uppercase:true,addSemicolon:true,lineBreaks:false,indentSize:2},// For learning examples with line breaks\ntutorial:{uppercase:true,addSemicolon:true,lineBreaks:true,indentSize:2},// For user input (minimal formatting)\nuserInput:{uppercase:false,addSemicolon:false,lineBreaks:false,indentSize:0},// For validation display\nvalidation:{uppercase:true,addSemicolon:true,lineBreaks:false,indentSize:0}};export default{formatSQLForDisplay,normalizeSQLForComparison,validateSQLEquivalence,SQL_FORMAT_PRESETS};","map":{"version":3,"names":["formatSQLForDisplay","sql","options","arguments","length","undefined","uppercase","addSemicolon","indentSize","lineBreaks","formatted","trim","keywords","forEach","keyword","regex","RegExp","concat","replace","indent","repeat","endsWith","normalizeSQLForComparison","toLowerCase","validateSQLEquivalence","userQuery","expectedQuery","userNormalized","expectedNormalized","expectedNoSemicolon","SQL_FORMAT_PRESETS","display","tutorial","userInput","validation"],"sources":["/Users/ss/Downloads/Code/Vibe_coding/SQL_practice_website/sql-practice-platform/frontend/src/utils/sqlFormatter.js"],"sourcesContent":["// SQL formatting utilities for consistent display across the website\n\n/**\n * Formats SQL queries for display with consistent styling\n * @param {string} sql - The SQL query to format\n * @param {Object} options - Formatting options\n * @returns {string} - Formatted SQL query\n */\nexport const formatSQLForDisplay = (sql, options = {}) => {\n  const {\n    uppercase = true,           // Convert keywords to uppercase\n    addSemicolon = true,       // Ensure query ends with semicolon\n    indentSize = 2,            // Number of spaces for indentation\n    lineBreaks = false         // Add line breaks for readability\n  } = options;\n\n  if (!sql || typeof sql !== 'string') {\n    return '';\n  }\n\n  let formatted = sql.trim();\n\n  // SQL keywords to uppercase (if enabled)\n  if (uppercase) {\n    const keywords = [\n      'SELECT', 'FROM', 'WHERE', 'JOIN', 'INNER', 'LEFT', 'RIGHT', 'FULL', 'OUTER',\n      'ON', 'GROUP', 'BY', 'HAVING', 'ORDER', 'LIMIT', 'OFFSET', 'DISTINCT',\n      'COUNT', 'SUM', 'AVG', 'MIN', 'MAX', 'AS', 'AND', 'OR', 'NOT', 'IN', 'LIKE',\n      'BETWEEN', 'IS', 'NULL', 'EXISTS', 'CASE', 'WHEN', 'THEN', 'ELSE', 'END',\n      'UNION', 'ALL', 'INSERT', 'INTO', 'VALUES', 'UPDATE', 'SET', 'DELETE',\n      'CREATE', 'ALTER', 'DROP', 'TABLE', 'INDEX', 'PRIMARY', 'KEY', 'FOREIGN',\n      'REFERENCES', 'CONSTRAINT', 'CHECK', 'DEFAULT', 'UNIQUE', 'AUTO_INCREMENT',\n      'WITH', 'RECURSIVE', 'OVER', 'PARTITION', 'ROW_NUMBER', 'RANK', 'DENSE_RANK'\n    ];\n\n    keywords.forEach(keyword => {\n      const regex = new RegExp(`\\\\b${keyword}\\\\b`, 'gi');\n      formatted = formatted.replace(regex, keyword);\n    });\n  }\n\n  // Add consistent spacing\n  formatted = formatted\n    .replace(/\\s+/g, ' ')           // Multiple spaces to single space\n    .replace(/,\\s*/g, ', ')         // Standardize comma spacing\n    .replace(/\\(\\s+/g, '(')         // Remove space after opening parenthesis\n    .replace(/\\s+\\)/g, ')')         // Remove space before closing parenthesis\n    .replace(/\\s*=\\s*/g, ' = ')     // Standardize equals spacing\n    .replace(/\\s*<\\s*/g, ' < ')     // Standardize less than spacing\n    .replace(/\\s*>\\s*/g, ' > ')     // Standardize greater than spacing\n    .replace(/\\s*<=\\s*/g, ' <= ')   // Standardize less than or equal spacing\n    .replace(/\\s*>=\\s*/g, ' >= ')   // Standardize greater than or equal spacing\n    .replace(/\\s*!=\\s*/g, ' != ')   // Standardize not equal spacing\n    .trim();\n\n  // Add line breaks for readability (if enabled)\n  if (lineBreaks) {\n    const indent = ' '.repeat(indentSize);\n    formatted = formatted\n      .replace(/\\bFROM\\b/gi, '\\nFROM')\n      .replace(/\\bWHERE\\b/gi, '\\nWHERE')\n      .replace(/\\bJOIN\\b/gi, '\\nJOIN')\n      .replace(/\\bINNER JOIN\\b/gi, '\\nINNER JOIN')\n      .replace(/\\bLEFT JOIN\\b/gi, '\\nLEFT JOIN')\n      .replace(/\\bRIGHT JOIN\\b/gi, '\\nRIGHT JOIN')\n      .replace(/\\bFULL JOIN\\b/gi, '\\nFULL JOIN')\n      .replace(/\\bGROUP BY\\b/gi, '\\nGROUP BY')\n      .replace(/\\bHAVING\\b/gi, '\\nHAVING')\n      .replace(/\\bORDER BY\\b/gi, '\\nORDER BY')\n      .replace(/\\bLIMIT\\b/gi, '\\nLIMIT')\n      .replace(/\\n/g, '\\n' + indent)\n      .trim();\n  }\n\n  // Add semicolon if missing (if enabled)\n  if (addSemicolon && !formatted.endsWith(';')) {\n    formatted += ';';\n  }\n\n  return formatted;\n};\n\n/**\n * Normalizes SQL queries for comparison (used in validation)\n * @param {string} sql - The SQL query to normalize\n * @returns {string} - Normalized SQL query\n */\nexport const normalizeSQLForComparison = (sql) => {\n  if (!sql || typeof sql !== 'string') {\n    return '';\n  }\n\n  return sql.trim()\n    .toLowerCase()\n    .replace(/\\s+/g, ' ')          // Multiple spaces to single space\n    .replace(/;\\s*$/, '')          // Remove trailing semicolon\n    .replace(/,\\s+/g, ', ')        // Standardize comma spacing\n    .replace(/\\(\\s+/g, '(')        // Remove space after opening parenthesis\n    .replace(/\\s+\\)/g, ')')        // Remove space before closing parenthesis\n    .trim();\n};\n\n/**\n * Validates if two SQL queries are equivalent\n * @param {string} userQuery - User's SQL query\n * @param {string} expectedQuery - Expected SQL query\n * @returns {boolean} - True if queries are equivalent\n */\nexport const validateSQLEquivalence = (userQuery, expectedQuery) => {\n  const userNormalized = normalizeSQLForComparison(userQuery);\n  const expectedNormalized = normalizeSQLForComparison(expectedQuery);\n  const expectedNoSemicolon = normalizeSQLForComparison(expectedQuery.replace(/;$/, ''));\n  \n  return userNormalized === expectedNormalized || \n         userNormalized === expectedNoSemicolon;\n};\n\n/**\n * Gets SQL formatting options for different contexts\n */\nexport const SQL_FORMAT_PRESETS = {\n  // For display in code blocks and examples\n  display: {\n    uppercase: true,\n    addSemicolon: true,\n    lineBreaks: false,\n    indentSize: 2\n  },\n  \n  // For learning examples with line breaks\n  tutorial: {\n    uppercase: true,\n    addSemicolon: true,\n    lineBreaks: true,\n    indentSize: 2\n  },\n  \n  // For user input (minimal formatting)\n  userInput: {\n    uppercase: false,\n    addSemicolon: false,\n    lineBreaks: false,\n    indentSize: 0\n  },\n  \n  // For validation display\n  validation: {\n    uppercase: true,\n    addSemicolon: true,\n    lineBreaks: false,\n    indentSize: 0\n  }\n};\n\nexport default {\n  formatSQLForDisplay,\n  normalizeSQLForComparison,\n  validateSQLEquivalence,\n  SQL_FORMAT_PRESETS\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}