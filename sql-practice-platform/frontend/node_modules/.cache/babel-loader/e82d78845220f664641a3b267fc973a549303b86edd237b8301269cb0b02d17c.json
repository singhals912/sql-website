{"ast":null,"code":"// Temporary mock data for learning system demonstration\n// This will be used until backend is restarted with new learning routes\nexport const mockLearningModules=[{id:'basic-queries',title:'Basic SQL Queries',description:'Learn the fundamentals of SQL with SELECT, WHERE, and ORDER BY',difficulty:'beginner',estimatedTime:'45 minutes',prerequisites:[],conceptCount:3},{id:'aggregation',title:'Aggregation Functions',description:'Master COUNT, SUM, AVG, MIN, MAX and GROUP BY operations',difficulty:'intermediate',estimatedTime:'60 minutes',prerequisites:['basic-queries'],conceptCount:3},{id:'joins',title:'SQL Joins',description:'Connect data across multiple tables with INNER, LEFT, RIGHT, and FULL joins',difficulty:'intermediate',estimatedTime:'75 minutes',prerequisites:['basic-queries'],conceptCount:4},{id:'subqueries',title:'Subqueries',description:'Learn nested queries, correlated subqueries, and EXISTS operations',difficulty:'intermediate',estimatedTime:'50 minutes',prerequisites:['basic-queries','aggregation'],conceptCount:2},{id:'window-functions',title:'Window Functions',description:'Advanced analytics with ROW_NUMBER, RANK, DENSE_RANK, and aggregate window functions',difficulty:'advanced',estimatedTime:'90 minutes',prerequisites:['basic-queries','aggregation','joins'],conceptCount:2},{id:'advanced-topics',title:'Advanced SQL Topics',description:'CTEs, recursive queries, pivot operations, and performance optimization',difficulty:'advanced',estimatedTime:'120 minutes',prerequisites:['basic-queries','aggregation','joins','subqueries','window-functions'],conceptCount:2}];export const mockLearningPaths=[{id:'sql-fundamentals',title:'SQL Fundamentals',description:'Master the basics of SQL querying',modules:['basic-queries','aggregation','joins'],estimatedTime:'3-4 hours'},{id:'intermediate-sql',title:'Intermediate SQL',description:'Advanced querying techniques',modules:['subqueries','window-functions'],estimatedTime:'2-3 hours'},{id:'advanced-sql',title:'Advanced SQL',description:'Expert-level SQL concepts',modules:['advanced-topics'],estimatedTime:'2-3 hours'}];export const mockUserProgress={userId:'demo-user',completedModules:[],currentModule:'basic-queries',currentConcept:'select-basics',totalConceptsCompleted:0,totalConcepts:16,completionPercentage:0};export const mockModuleContent={'basic-queries':{id:'basic-queries',title:'Basic SQL Queries',description:'Learn the fundamentals of SQL with SELECT, WHERE, and ORDER BY',difficulty:'beginner',estimatedTime:'45 minutes',prerequisites:[],concepts:[{id:'select-basics',title:'SELECT Statement Basics',theory:{explanation:'The SELECT statement is the foundation of SQL queries. It retrieves data from database tables.',syntax:'SELECT column1, column2 FROM table_name;',keyPoints:['SELECT specifies which columns to retrieve','FROM specifies which table to query','Use * to select all columns','Column names are case-insensitive']},examples:[{title:'Select all employees',query:'SELECT * FROM employees;',explanation:'Retrieves all columns and rows from the employees table'},{title:'Select specific columns',query:'SELECT first_name, last_name, salary FROM employees;',explanation:'Retrieves only the specified columns'}],practice:[{instruction:'Select all products from the products table',expectedQuery:'SELECT * FROM products;',tables:['products'],hint:'Use SELECT * to get all columns'},{instruction:'Select only product_name and price from products',expectedQuery:'SELECT product_name, price FROM products;',tables:['products'],hint:'List the column names separated by commas'}]},{id:'where-clause',title:'WHERE Clause Filtering',theory:{explanation:'The WHERE clause filters rows based on specified conditions.',syntax:'SELECT columns FROM table WHERE condition;',keyPoints:['WHERE filters rows that meet specific criteria','Common operators: =, !=, <, >, <=, >=','Use quotes for text values','Combine conditions with AND, OR']},examples:[{title:'Filter by salary',query:'SELECT * FROM employees WHERE salary > 50000;',explanation:'Shows employees earning more than $50,000'},{title:'Filter by department',query:\"SELECT * FROM employees WHERE department = 'Engineering';\",explanation:'Shows only engineering department employees'}],practice:[{instruction:'Find products with price greater than 100',expectedQuery:'SELECT * FROM products WHERE price > 100;',tables:['products'],hint:'Use the > operator to compare prices'}]},{id:'order-by',title:'ORDER BY Sorting',theory:{explanation:'ORDER BY sorts query results in ascending or descending order.',syntax:'SELECT columns FROM table ORDER BY column [ASC|DESC];',keyPoints:['ASC is ascending (default)','DESC is descending','Can sort by multiple columns','NULL values appear first in ASC, last in DESC']},examples:[{title:'Sort by salary descending',query:'SELECT * FROM employees ORDER BY salary DESC;',explanation:'Shows employees from highest to lowest salary'}],practice:[{instruction:'Sort products by price in ascending order',expectedQuery:'SELECT * FROM products ORDER BY price ASC;',tables:['products'],hint:'Use ORDER BY with ASC (or leave it off since ASC is default)'}]}]}};","map":{"version":3,"names":["mockLearningModules","id","title","description","difficulty","estimatedTime","prerequisites","conceptCount","mockLearningPaths","modules","mockUserProgress","userId","completedModules","currentModule","currentConcept","totalConceptsCompleted","totalConcepts","completionPercentage","mockModuleContent","concepts","theory","explanation","syntax","keyPoints","examples","query","practice","instruction","expectedQuery","tables","hint"],"sources":["/Users/ss/Downloads/Code/Vibe_coding/SQL_practice_website/sql-practice-platform/frontend/src/data/mockLearningData.js"],"sourcesContent":["// Temporary mock data for learning system demonstration\n// This will be used until backend is restarted with new learning routes\n\nexport const mockLearningModules = [\n  {\n    id: 'basic-queries',\n    title: 'Basic SQL Queries',\n    description: 'Learn the fundamentals of SQL with SELECT, WHERE, and ORDER BY',\n    difficulty: 'beginner',\n    estimatedTime: '45 minutes',\n    prerequisites: [],\n    conceptCount: 3\n  },\n  {\n    id: 'aggregation',\n    title: 'Aggregation Functions',\n    description: 'Master COUNT, SUM, AVG, MIN, MAX and GROUP BY operations',\n    difficulty: 'intermediate',\n    estimatedTime: '60 minutes',\n    prerequisites: ['basic-queries'],\n    conceptCount: 3\n  },\n  {\n    id: 'joins',\n    title: 'SQL Joins',\n    description: 'Connect data across multiple tables with INNER, LEFT, RIGHT, and FULL joins',\n    difficulty: 'intermediate',\n    estimatedTime: '75 minutes',\n    prerequisites: ['basic-queries'],\n    conceptCount: 4\n  },\n  {\n    id: 'subqueries',\n    title: 'Subqueries',\n    description: 'Learn nested queries, correlated subqueries, and EXISTS operations',\n    difficulty: 'intermediate',\n    estimatedTime: '50 minutes',\n    prerequisites: ['basic-queries', 'aggregation'],\n    conceptCount: 2\n  },\n  {\n    id: 'window-functions',\n    title: 'Window Functions',\n    description: 'Advanced analytics with ROW_NUMBER, RANK, DENSE_RANK, and aggregate window functions',\n    difficulty: 'advanced',\n    estimatedTime: '90 minutes',\n    prerequisites: ['basic-queries', 'aggregation', 'joins'],\n    conceptCount: 2\n  },\n  {\n    id: 'advanced-topics',\n    title: 'Advanced SQL Topics',\n    description: 'CTEs, recursive queries, pivot operations, and performance optimization',\n    difficulty: 'advanced',\n    estimatedTime: '120 minutes',\n    prerequisites: ['basic-queries', 'aggregation', 'joins', 'subqueries', 'window-functions'],\n    conceptCount: 2\n  }\n];\n\nexport const mockLearningPaths = [\n  {\n    id: 'sql-fundamentals',\n    title: 'SQL Fundamentals',\n    description: 'Master the basics of SQL querying',\n    modules: ['basic-queries', 'aggregation', 'joins'],\n    estimatedTime: '3-4 hours'\n  },\n  {\n    id: 'intermediate-sql',\n    title: 'Intermediate SQL',\n    description: 'Advanced querying techniques',\n    modules: ['subqueries', 'window-functions'],\n    estimatedTime: '2-3 hours'\n  },\n  {\n    id: 'advanced-sql',\n    title: 'Advanced SQL',\n    description: 'Expert-level SQL concepts',\n    modules: ['advanced-topics'],\n    estimatedTime: '2-3 hours'\n  }\n];\n\nexport const mockUserProgress = {\n  userId: 'demo-user',\n  completedModules: [],\n  currentModule: 'basic-queries',\n  currentConcept: 'select-basics',\n  totalConceptsCompleted: 0,\n  totalConcepts: 16,\n  completionPercentage: 0\n};\n\nexport const mockModuleContent = {\n  'basic-queries': {\n    id: 'basic-queries',\n    title: 'Basic SQL Queries',\n    description: 'Learn the fundamentals of SQL with SELECT, WHERE, and ORDER BY',\n    difficulty: 'beginner',\n    estimatedTime: '45 minutes',\n    prerequisites: [],\n    concepts: [\n      {\n        id: 'select-basics',\n        title: 'SELECT Statement Basics',\n        theory: {\n          explanation: 'The SELECT statement is the foundation of SQL queries. It retrieves data from database tables.',\n          syntax: 'SELECT column1, column2 FROM table_name;',\n          keyPoints: [\n            'SELECT specifies which columns to retrieve',\n            'FROM specifies which table to query',\n            'Use * to select all columns',\n            'Column names are case-insensitive'\n          ]\n        },\n        examples: [\n          {\n            title: 'Select all employees',\n            query: 'SELECT * FROM employees;',\n            explanation: 'Retrieves all columns and rows from the employees table'\n          },\n          {\n            title: 'Select specific columns',\n            query: 'SELECT first_name, last_name, salary FROM employees;',\n            explanation: 'Retrieves only the specified columns'\n          }\n        ],\n        practice: [\n          {\n            instruction: 'Select all products from the products table',\n            expectedQuery: 'SELECT * FROM products;',\n            tables: ['products'],\n            hint: 'Use SELECT * to get all columns'\n          },\n          {\n            instruction: 'Select only product_name and price from products',\n            expectedQuery: 'SELECT product_name, price FROM products;',\n            tables: ['products'],\n            hint: 'List the column names separated by commas'\n          }\n        ]\n      },\n      {\n        id: 'where-clause',\n        title: 'WHERE Clause Filtering',\n        theory: {\n          explanation: 'The WHERE clause filters rows based on specified conditions.',\n          syntax: 'SELECT columns FROM table WHERE condition;',\n          keyPoints: [\n            'WHERE filters rows that meet specific criteria',\n            'Common operators: =, !=, <, >, <=, >=',\n            'Use quotes for text values',\n            'Combine conditions with AND, OR'\n          ]\n        },\n        examples: [\n          {\n            title: 'Filter by salary',\n            query: 'SELECT * FROM employees WHERE salary > 50000;',\n            explanation: 'Shows employees earning more than $50,000'\n          },\n          {\n            title: 'Filter by department',\n            query: \"SELECT * FROM employees WHERE department = 'Engineering';\",\n            explanation: 'Shows only engineering department employees'\n          }\n        ],\n        practice: [\n          {\n            instruction: 'Find products with price greater than 100',\n            expectedQuery: 'SELECT * FROM products WHERE price > 100;',\n            tables: ['products'],\n            hint: 'Use the > operator to compare prices'\n          }\n        ]\n      },\n      {\n        id: 'order-by',\n        title: 'ORDER BY Sorting',\n        theory: {\n          explanation: 'ORDER BY sorts query results in ascending or descending order.',\n          syntax: 'SELECT columns FROM table ORDER BY column [ASC|DESC];',\n          keyPoints: [\n            'ASC is ascending (default)',\n            'DESC is descending', \n            'Can sort by multiple columns',\n            'NULL values appear first in ASC, last in DESC'\n          ]\n        },\n        examples: [\n          {\n            title: 'Sort by salary descending',\n            query: 'SELECT * FROM employees ORDER BY salary DESC;',\n            explanation: 'Shows employees from highest to lowest salary'\n          }\n        ],\n        practice: [\n          {\n            instruction: 'Sort products by price in ascending order',\n            expectedQuery: 'SELECT * FROM products ORDER BY price ASC;',\n            tables: ['products'],\n            hint: 'Use ORDER BY with ASC (or leave it off since ASC is default)'\n          }\n        ]\n      }\n    ]\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}