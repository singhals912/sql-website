{"ast":null,"code":"// SQL formatting utilities for consistent display across the website\n\n/**\n * Formats SQL queries for display with consistent styling\n * @param {string} sql - The SQL query to format\n * @param {Object} options - Formatting options\n * @returns {string} - Formatted SQL query\n */\nexport const formatSQLForDisplay = (sql, options = {}) => {\n  const {\n    uppercase = true,\n    // Convert keywords to uppercase\n    addSemicolon = true,\n    // Ensure query ends with semicolon\n    indentSize = 2,\n    // Number of spaces for indentation\n    lineBreaks = false // Add line breaks for readability\n  } = options;\n  if (!sql || typeof sql !== 'string') {\n    return '';\n  }\n  let formatted = sql.trim();\n\n  // SQL keywords to uppercase (if enabled)\n  if (uppercase) {\n    const keywords = ['SELECT', 'FROM', 'WHERE', 'JOIN', 'INNER', 'LEFT', 'RIGHT', 'FULL', 'OUTER', 'ON', 'GROUP', 'BY', 'HAVING', 'ORDER', 'LIMIT', 'OFFSET', 'DISTINCT', 'COUNT', 'SUM', 'AVG', 'MIN', 'MAX', 'AS', 'AND', 'OR', 'NOT', 'IN', 'LIKE', 'BETWEEN', 'IS', 'NULL', 'EXISTS', 'CASE', 'WHEN', 'THEN', 'ELSE', 'END', 'UNION', 'ALL', 'INSERT', 'INTO', 'VALUES', 'UPDATE', 'SET', 'DELETE', 'CREATE', 'ALTER', 'DROP', 'TABLE', 'INDEX', 'PRIMARY', 'KEY', 'FOREIGN', 'REFERENCES', 'CONSTRAINT', 'CHECK', 'DEFAULT', 'UNIQUE', 'AUTO_INCREMENT', 'WITH', 'RECURSIVE', 'OVER', 'PARTITION', 'ROW_NUMBER', 'RANK', 'DENSE_RANK'];\n    keywords.forEach(keyword => {\n      const regex = new RegExp(`\\\\b${keyword}\\\\b`, 'gi');\n      formatted = formatted.replace(regex, keyword);\n    });\n  }\n\n  // Add consistent spacing\n  formatted = formatted.replace(/\\s+/g, ' ') // Multiple spaces to single space\n  .replace(/,\\s*/g, ', ') // Standardize comma spacing\n  .replace(/\\(\\s+/g, '(') // Remove space after opening parenthesis\n  .replace(/\\s+\\)/g, ')') // Remove space before closing parenthesis\n  .replace(/\\s*=\\s*/g, ' = ') // Standardize equals spacing\n  .replace(/\\s*<\\s*/g, ' < ') // Standardize less than spacing\n  .replace(/\\s*>\\s*/g, ' > ') // Standardize greater than spacing\n  .replace(/\\s*<=\\s*/g, ' <= ') // Standardize less than or equal spacing\n  .replace(/\\s*>=\\s*/g, ' >= ') // Standardize greater than or equal spacing\n  .replace(/\\s*!=\\s*/g, ' != ') // Standardize not equal spacing\n  .trim();\n\n  // Add line breaks for readability (if enabled)\n  if (lineBreaks) {\n    const indent = ' '.repeat(indentSize);\n    formatted = formatted.replace(/\\bFROM\\b/gi, '\\nFROM').replace(/\\bWHERE\\b/gi, '\\nWHERE').replace(/\\bJOIN\\b/gi, '\\nJOIN').replace(/\\bINNER JOIN\\b/gi, '\\nINNER JOIN').replace(/\\bLEFT JOIN\\b/gi, '\\nLEFT JOIN').replace(/\\bRIGHT JOIN\\b/gi, '\\nRIGHT JOIN').replace(/\\bFULL JOIN\\b/gi, '\\nFULL JOIN').replace(/\\bGROUP BY\\b/gi, '\\nGROUP BY').replace(/\\bHAVING\\b/gi, '\\nHAVING').replace(/\\bORDER BY\\b/gi, '\\nORDER BY').replace(/\\bLIMIT\\b/gi, '\\nLIMIT').replace(/\\n/g, '\\n' + indent).trim();\n  }\n\n  // Add semicolon if missing (if enabled)\n  if (addSemicolon && !formatted.endsWith(';')) {\n    formatted += ';';\n  }\n  return formatted;\n};\n\n/**\n * Normalizes SQL queries for comparison (used in validation)\n * @param {string} sql - The SQL query to normalize\n * @returns {string} - Normalized SQL query\n */\nexport const normalizeSQLForComparison = sql => {\n  if (!sql || typeof sql !== 'string') {\n    return '';\n  }\n  return sql.trim().toLowerCase().replace(/\\s+/g, ' ') // Multiple spaces to single space\n  .replace(/;\\s*$/, '') // Remove trailing semicolon\n  .replace(/,\\s+/g, ', ') // Standardize comma spacing\n  .replace(/\\(\\s+/g, '(') // Remove space after opening parenthesis\n  .replace(/\\s+\\)/g, ')') // Remove space before closing parenthesis\n  .trim();\n};\n\n/**\n * Validates if two SQL queries are equivalent\n * @param {string} userQuery - User's SQL query\n * @param {string} expectedQuery - Expected SQL query\n * @returns {boolean} - True if queries are equivalent\n */\nexport const validateSQLEquivalence = (userQuery, expectedQuery) => {\n  const userNormalized = normalizeSQLForComparison(userQuery);\n  const expectedNormalized = normalizeSQLForComparison(expectedQuery);\n  const expectedNoSemicolon = normalizeSQLForComparison(expectedQuery.replace(/;$/, ''));\n  return userNormalized === expectedNormalized || userNormalized === expectedNoSemicolon;\n};\n\n/**\n * Gets SQL formatting options for different contexts\n */\nexport const SQL_FORMAT_PRESETS = {\n  // For display in code blocks and examples\n  display: {\n    uppercase: true,\n    addSemicolon: true,\n    lineBreaks: false,\n    indentSize: 2\n  },\n  // For learning examples with line breaks\n  tutorial: {\n    uppercase: true,\n    addSemicolon: true,\n    lineBreaks: true,\n    indentSize: 2\n  },\n  // For user input (minimal formatting)\n  userInput: {\n    uppercase: false,\n    addSemicolon: false,\n    lineBreaks: false,\n    indentSize: 0\n  },\n  // For validation display\n  validation: {\n    uppercase: true,\n    addSemicolon: true,\n    lineBreaks: false,\n    indentSize: 0\n  }\n};\nexport default {\n  formatSQLForDisplay,\n  normalizeSQLForComparison,\n  validateSQLEquivalence,\n  SQL_FORMAT_PRESETS\n};","map":{"version":3,"names":["formatSQLForDisplay","sql","options","uppercase","addSemicolon","indentSize","lineBreaks","formatted","trim","keywords","forEach","keyword","regex","RegExp","replace","indent","repeat","endsWith","normalizeSQLForComparison","toLowerCase","validateSQLEquivalence","userQuery","expectedQuery","userNormalized","expectedNormalized","expectedNoSemicolon","SQL_FORMAT_PRESETS","display","tutorial","userInput","validation"],"sources":["/Users/ss/Downloads/Code/Vibe_coding/SQL_practice_website/sql-practice-platform/frontend/src/utils/sqlFormatter.js"],"sourcesContent":["// SQL formatting utilities for consistent display across the website\n\n/**\n * Formats SQL queries for display with consistent styling\n * @param {string} sql - The SQL query to format\n * @param {Object} options - Formatting options\n * @returns {string} - Formatted SQL query\n */\nexport const formatSQLForDisplay = (sql, options = {}) => {\n  const {\n    uppercase = true,           // Convert keywords to uppercase\n    addSemicolon = true,       // Ensure query ends with semicolon\n    indentSize = 2,            // Number of spaces for indentation\n    lineBreaks = false         // Add line breaks for readability\n  } = options;\n\n  if (!sql || typeof sql !== 'string') {\n    return '';\n  }\n\n  let formatted = sql.trim();\n\n  // SQL keywords to uppercase (if enabled)\n  if (uppercase) {\n    const keywords = [\n      'SELECT', 'FROM', 'WHERE', 'JOIN', 'INNER', 'LEFT', 'RIGHT', 'FULL', 'OUTER',\n      'ON', 'GROUP', 'BY', 'HAVING', 'ORDER', 'LIMIT', 'OFFSET', 'DISTINCT',\n      'COUNT', 'SUM', 'AVG', 'MIN', 'MAX', 'AS', 'AND', 'OR', 'NOT', 'IN', 'LIKE',\n      'BETWEEN', 'IS', 'NULL', 'EXISTS', 'CASE', 'WHEN', 'THEN', 'ELSE', 'END',\n      'UNION', 'ALL', 'INSERT', 'INTO', 'VALUES', 'UPDATE', 'SET', 'DELETE',\n      'CREATE', 'ALTER', 'DROP', 'TABLE', 'INDEX', 'PRIMARY', 'KEY', 'FOREIGN',\n      'REFERENCES', 'CONSTRAINT', 'CHECK', 'DEFAULT', 'UNIQUE', 'AUTO_INCREMENT',\n      'WITH', 'RECURSIVE', 'OVER', 'PARTITION', 'ROW_NUMBER', 'RANK', 'DENSE_RANK'\n    ];\n\n    keywords.forEach(keyword => {\n      const regex = new RegExp(`\\\\b${keyword}\\\\b`, 'gi');\n      formatted = formatted.replace(regex, keyword);\n    });\n  }\n\n  // Add consistent spacing\n  formatted = formatted\n    .replace(/\\s+/g, ' ')           // Multiple spaces to single space\n    .replace(/,\\s*/g, ', ')         // Standardize comma spacing\n    .replace(/\\(\\s+/g, '(')         // Remove space after opening parenthesis\n    .replace(/\\s+\\)/g, ')')         // Remove space before closing parenthesis\n    .replace(/\\s*=\\s*/g, ' = ')     // Standardize equals spacing\n    .replace(/\\s*<\\s*/g, ' < ')     // Standardize less than spacing\n    .replace(/\\s*>\\s*/g, ' > ')     // Standardize greater than spacing\n    .replace(/\\s*<=\\s*/g, ' <= ')   // Standardize less than or equal spacing\n    .replace(/\\s*>=\\s*/g, ' >= ')   // Standardize greater than or equal spacing\n    .replace(/\\s*!=\\s*/g, ' != ')   // Standardize not equal spacing\n    .trim();\n\n  // Add line breaks for readability (if enabled)\n  if (lineBreaks) {\n    const indent = ' '.repeat(indentSize);\n    formatted = formatted\n      .replace(/\\bFROM\\b/gi, '\\nFROM')\n      .replace(/\\bWHERE\\b/gi, '\\nWHERE')\n      .replace(/\\bJOIN\\b/gi, '\\nJOIN')\n      .replace(/\\bINNER JOIN\\b/gi, '\\nINNER JOIN')\n      .replace(/\\bLEFT JOIN\\b/gi, '\\nLEFT JOIN')\n      .replace(/\\bRIGHT JOIN\\b/gi, '\\nRIGHT JOIN')\n      .replace(/\\bFULL JOIN\\b/gi, '\\nFULL JOIN')\n      .replace(/\\bGROUP BY\\b/gi, '\\nGROUP BY')\n      .replace(/\\bHAVING\\b/gi, '\\nHAVING')\n      .replace(/\\bORDER BY\\b/gi, '\\nORDER BY')\n      .replace(/\\bLIMIT\\b/gi, '\\nLIMIT')\n      .replace(/\\n/g, '\\n' + indent)\n      .trim();\n  }\n\n  // Add semicolon if missing (if enabled)\n  if (addSemicolon && !formatted.endsWith(';')) {\n    formatted += ';';\n  }\n\n  return formatted;\n};\n\n/**\n * Normalizes SQL queries for comparison (used in validation)\n * @param {string} sql - The SQL query to normalize\n * @returns {string} - Normalized SQL query\n */\nexport const normalizeSQLForComparison = (sql) => {\n  if (!sql || typeof sql !== 'string') {\n    return '';\n  }\n\n  return sql.trim()\n    .toLowerCase()\n    .replace(/\\s+/g, ' ')          // Multiple spaces to single space\n    .replace(/;\\s*$/, '')          // Remove trailing semicolon\n    .replace(/,\\s+/g, ', ')        // Standardize comma spacing\n    .replace(/\\(\\s+/g, '(')        // Remove space after opening parenthesis\n    .replace(/\\s+\\)/g, ')')        // Remove space before closing parenthesis\n    .trim();\n};\n\n/**\n * Validates if two SQL queries are equivalent\n * @param {string} userQuery - User's SQL query\n * @param {string} expectedQuery - Expected SQL query\n * @returns {boolean} - True if queries are equivalent\n */\nexport const validateSQLEquivalence = (userQuery, expectedQuery) => {\n  const userNormalized = normalizeSQLForComparison(userQuery);\n  const expectedNormalized = normalizeSQLForComparison(expectedQuery);\n  const expectedNoSemicolon = normalizeSQLForComparison(expectedQuery.replace(/;$/, ''));\n  \n  return userNormalized === expectedNormalized || \n         userNormalized === expectedNoSemicolon;\n};\n\n/**\n * Gets SQL formatting options for different contexts\n */\nexport const SQL_FORMAT_PRESETS = {\n  // For display in code blocks and examples\n  display: {\n    uppercase: true,\n    addSemicolon: true,\n    lineBreaks: false,\n    indentSize: 2\n  },\n  \n  // For learning examples with line breaks\n  tutorial: {\n    uppercase: true,\n    addSemicolon: true,\n    lineBreaks: true,\n    indentSize: 2\n  },\n  \n  // For user input (minimal formatting)\n  userInput: {\n    uppercase: false,\n    addSemicolon: false,\n    lineBreaks: false,\n    indentSize: 0\n  },\n  \n  // For validation display\n  validation: {\n    uppercase: true,\n    addSemicolon: true,\n    lineBreaks: false,\n    indentSize: 0\n  }\n};\n\nexport default {\n  formatSQLForDisplay,\n  normalizeSQLForComparison,\n  validateSQLEquivalence,\n  SQL_FORMAT_PRESETS\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}