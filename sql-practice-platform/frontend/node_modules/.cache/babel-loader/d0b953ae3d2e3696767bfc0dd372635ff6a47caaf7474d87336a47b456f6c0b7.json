{"ast":null,"code":"import { useAuth } from '../contexts/AuthContext';\nimport ProgressService from './progressService';\nimport config, { apiUrl } from '../config/environment.js';\nclass LearningPathService {\n  // Get headers with authentication\n  static getHeaders(token = null) {\n    const headers = {\n      'Content-Type': 'application/json',\n      'X-Session-ID': ProgressService.sessionId\n    };\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    return headers;\n  }\n\n  // Get all learning paths\n  static async getLearningPaths() {\n    try {\n      const response = await fetch(`${this.baseURL}/learning-paths`);\n      const data = await response.json();\n\n      // Handle both direct array response and wrapped response\n      if (Array.isArray(data)) {\n        return data;\n      } else if (data.success && data.learningPaths) {\n        return data.learningPaths;\n      } else {\n        throw new Error(data.error || 'Failed to fetch learning paths');\n      }\n    } catch (error) {\n      console.error('Error fetching learning paths:', error);\n      throw error;\n    }\n  }\n\n  // Get specific learning path with steps\n  static async getLearningPath(pathId) {\n    try {\n      const response = await fetch(`${this.baseURL}/learning-paths/${pathId}`);\n      const data = await response.json();\n\n      // Handle direct response format from updated API\n      if (data.error) {\n        throw new Error(data.error);\n      } else if (data.title && data.problems) {\n        // Convert 'problems' to 'steps' for frontend compatibility\n        return {\n          ...data,\n          steps: data.problems.map(problem => ({\n            ...problem,\n            problem_numeric_id: problem.numeric_id,\n            step_order: problem.stepOrder\n          }))\n        };\n      } else {\n        throw new Error('Failed to fetch learning path');\n      }\n    } catch (error) {\n      console.error('Error fetching learning path:', error);\n      throw error;\n    }\n  }\n\n  // Start a learning path (for authenticated users)\n  static async startLearningPath(pathId, token) {\n    try {\n      const response = await fetch(`${this.baseURL}/learning-paths/${pathId}/start`, {\n        method: 'POST',\n        headers: this.getHeaders(token)\n      });\n      const data = await response.json();\n      if (data.success) {\n        return data.progress;\n      } else {\n        throw new Error(data.error || 'Failed to start learning path');\n      }\n    } catch (error) {\n      console.error('Error starting learning path:', error);\n      throw error;\n    }\n  }\n\n  // Get user progress for learning paths\n  static async getUserProgress(token) {\n    try {\n      const response = await fetch(`${this.baseURL}/learning-paths/progress`, {\n        headers: this.getHeaders(token)\n      });\n      const data = await response.json();\n      if (data.success) {\n        return data.progress;\n      } else {\n        throw new Error(data.error || 'Failed to fetch progress');\n      }\n    } catch (error) {\n      console.error('Error fetching learning path progress:', error);\n      throw error;\n    }\n  }\n\n  // Update step completion\n  static async updateStepCompletion(pathId, stepId, completed, token) {\n    try {\n      const response = await fetch(`${this.baseURL}/learning-paths/${pathId}/steps/${stepId}`, {\n        method: 'PUT',\n        headers: this.getHeaders(token),\n        body: JSON.stringify({\n          completed\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        return data.progress;\n      } else {\n        throw new Error(data.error || 'Failed to update step');\n      }\n    } catch (error) {\n      console.error('Error updating step completion:', error);\n      throw error;\n    }\n  }\n\n  // Get recommended learning paths based on user's progress\n  static async getRecommendations(token) {\n    try {\n      const response = await fetch(`${this.baseURL}/learning-paths/recommendations`, {\n        headers: this.getHeaders(token)\n      });\n      const data = await response.json();\n      if (data.success) {\n        return data.recommendations;\n      } else {\n        return []; // Return empty array if no recommendations\n      }\n    } catch (error) {\n      console.error('Error fetching recommendations:', error);\n      return [];\n    }\n  }\n\n  // Get learning path statistics\n  static async getStatistics() {\n    try {\n      const response = await fetch(`${this.baseURL}/learning-paths/statistics`);\n      const data = await response.json();\n      if (data.success) {\n        return data.statistics;\n      } else {\n        return null;\n      }\n    } catch (error) {\n      console.error('Error fetching learning path statistics:', error);\n      return null;\n    }\n  }\n}\nLearningPathService.baseURL = config.API_BASE_URL;\nexport default LearningPathService;","map":{"version":3,"names":["useAuth","ProgressService","config","apiUrl","LearningPathService","getHeaders","token","headers","sessionId","getLearningPaths","response","fetch","baseURL","data","json","Array","isArray","success","learningPaths","Error","error","console","getLearningPath","pathId","title","problems","steps","map","problem","problem_numeric_id","numeric_id","step_order","stepOrder","startLearningPath","method","progress","getUserProgress","updateStepCompletion","stepId","completed","body","JSON","stringify","getRecommendations","recommendations","getStatistics","statistics","API_BASE_URL"],"sources":["/Users/ss/Downloads/Code/Vibe_coding/SQL_practice_website/sql-practice-platform/frontend/src/services/learningPathService.js"],"sourcesContent":["import { useAuth } from '../contexts/AuthContext';\nimport ProgressService from './progressService';\nimport config, { apiUrl } from '../config/environment.js';\n\nclass LearningPathService {\n  static baseURL = config.API_BASE_URL;\n\n  // Get headers with authentication\n  static getHeaders(token = null) {\n    const headers = {\n      'Content-Type': 'application/json',\n      'X-Session-ID': ProgressService.sessionId,\n    };\n\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    return headers;\n  }\n\n  // Get all learning paths\n  static async getLearningPaths() {\n    try {\n      const response = await fetch(`${this.baseURL}/learning-paths`);\n      const data = await response.json();\n      \n      // Handle both direct array response and wrapped response\n      if (Array.isArray(data)) {\n        return data;\n      } else if (data.success && data.learningPaths) {\n        return data.learningPaths;\n      } else {\n        throw new Error(data.error || 'Failed to fetch learning paths');\n      }\n    } catch (error) {\n      console.error('Error fetching learning paths:', error);\n      throw error;\n    }\n  }\n\n  // Get specific learning path with steps\n  static async getLearningPath(pathId) {\n    try {\n      const response = await fetch(`${this.baseURL}/learning-paths/${pathId}`);\n      const data = await response.json();\n      \n      // Handle direct response format from updated API\n      if (data.error) {\n        throw new Error(data.error);\n      } else if (data.title && data.problems) {\n        // Convert 'problems' to 'steps' for frontend compatibility\n        return {\n          ...data,\n          steps: data.problems.map(problem => ({\n            ...problem,\n            problem_numeric_id: problem.numeric_id,\n            step_order: problem.stepOrder\n          }))\n        };\n      } else {\n        throw new Error('Failed to fetch learning path');\n      }\n    } catch (error) {\n      console.error('Error fetching learning path:', error);\n      throw error;\n    }\n  }\n\n  // Start a learning path (for authenticated users)\n  static async startLearningPath(pathId, token) {\n    try {\n      const response = await fetch(`${this.baseURL}/learning-paths/${pathId}/start`, {\n        method: 'POST',\n        headers: this.getHeaders(token)\n      });\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        return data.progress;\n      } else {\n        throw new Error(data.error || 'Failed to start learning path');\n      }\n    } catch (error) {\n      console.error('Error starting learning path:', error);\n      throw error;\n    }\n  }\n\n  // Get user progress for learning paths\n  static async getUserProgress(token) {\n    try {\n      const response = await fetch(`${this.baseURL}/learning-paths/progress`, {\n        headers: this.getHeaders(token)\n      });\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        return data.progress;\n      } else {\n        throw new Error(data.error || 'Failed to fetch progress');\n      }\n    } catch (error) {\n      console.error('Error fetching learning path progress:', error);\n      throw error;\n    }\n  }\n\n  // Update step completion\n  static async updateStepCompletion(pathId, stepId, completed, token) {\n    try {\n      const response = await fetch(`${this.baseURL}/learning-paths/${pathId}/steps/${stepId}`, {\n        method: 'PUT',\n        headers: this.getHeaders(token),\n        body: JSON.stringify({ completed })\n      });\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        return data.progress;\n      } else {\n        throw new Error(data.error || 'Failed to update step');\n      }\n    } catch (error) {\n      console.error('Error updating step completion:', error);\n      throw error;\n    }\n  }\n\n  // Get recommended learning paths based on user's progress\n  static async getRecommendations(token) {\n    try {\n      const response = await fetch(`${this.baseURL}/learning-paths/recommendations`, {\n        headers: this.getHeaders(token)\n      });\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        return data.recommendations;\n      } else {\n        return []; // Return empty array if no recommendations\n      }\n    } catch (error) {\n      console.error('Error fetching recommendations:', error);\n      return [];\n    }\n  }\n\n  // Get learning path statistics\n  static async getStatistics() {\n    try {\n      const response = await fetch(`${this.baseURL}/learning-paths/statistics`);\n      const data = await response.json();\n      \n      if (data.success) {\n        return data.statistics;\n      } else {\n        return null;\n      }\n    } catch (error) {\n      console.error('Error fetching learning path statistics:', error);\n      return null;\n    }\n  }\n}\n\nexport default LearningPathService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}