{"ast":null,"code":"var _jsxFileName = \"/Users/ss/Downloads/Code/Vibe_coding/SQL_practice_website/sql-practice-platform/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authUrl } from '../config/environment.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is authenticated on app load\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n  const checkAuthStatus = async () => {\n    const storedToken = localStorage.getItem('token');\n    if (!storedToken) {\n      setLoading(false);\n      return;\n    }\n    try {\n      const response = await fetch(authUrl('validate'), {\n        headers: {\n          'Authorization': `Bearer ${storedToken}`\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setUser(data.user);\n        setToken(storedToken);\n      } else {\n        // Token is invalid\n        localStorage.removeItem('token');\n        setToken(null);\n        setUser(null);\n      }\n    } catch (error) {\n      console.error('Auth check failed:', error);\n      localStorage.removeItem('token');\n      setToken(null);\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password, sessionId) => {\n    try {\n      const response = await fetch(authUrl('login'), {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password,\n          sessionId\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setUser(data.user);\n        setToken(data.token);\n        localStorage.setItem('token', data.token);\n        return {\n          success: true,\n          user: data.user\n        };\n      } else {\n        return {\n          success: false,\n          error: data.error\n        };\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      return {\n        success: false,\n        error: 'Login failed. Please try again.'\n      };\n    }\n  };\n  const register = async (email, password, username, fullName) => {\n    try {\n      const response = await fetch(authUrl('register'), {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password,\n          username,\n          fullName\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        return {\n          success: true,\n          message: data.message\n        };\n      } else {\n        return {\n          success: false,\n          error: data.error\n        };\n      }\n    } catch (error) {\n      console.error('Registration error:', error);\n      return {\n        success: false,\n        error: 'Registration failed. Please try again.'\n      };\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('token');\n  };\n  const updateProfile = async updates => {\n    try {\n      const response = await fetch('http://localhost:5001/api/auth/profile', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(updates)\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setUser(data.user);\n        return {\n          success: true,\n          user: data.user\n        };\n      } else {\n        return {\n          success: false,\n          error: data.error\n        };\n      }\n    } catch (error) {\n      console.error('Profile update error:', error);\n      return {\n        success: false,\n        error: 'Profile update failed.'\n      };\n    }\n  };\n  const forgotPassword = async email => {\n    try {\n      const response = await fetch('http://localhost:5001/api/auth/forgot-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      const data = await response.json();\n      return {\n        success: response.ok,\n        message: data.message,\n        error: data.error\n      };\n    } catch (error) {\n      console.error('Forgot password error:', error);\n      return {\n        success: false,\n        error: 'Request failed. Please try again.'\n      };\n    }\n  };\n  const resetPassword = async (token, password) => {\n    try {\n      const response = await fetch('http://localhost:5001/api/auth/reset-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token,\n          password\n        })\n      });\n      const data = await response.json();\n      return {\n        success: response.ok,\n        message: data.message,\n        error: data.error\n      };\n    } catch (error) {\n      console.error('Reset password error:', error);\n      return {\n        success: false,\n        error: 'Reset failed. Please try again.'\n      };\n    }\n  };\n  const value = {\n    user,\n    token,\n    loading,\n    isAuthenticated: !!user,\n    login,\n    register,\n    logout,\n    updateProfile,\n    forgotPassword,\n    resetPassword,\n    checkAuthStatus\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"6yaUUgx9bt/8SVo6kb7BgPC/qRU=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authUrl","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","token","setToken","localStorage","getItem","loading","setLoading","checkAuthStatus","storedToken","response","fetch","headers","ok","data","json","removeItem","error","console","login","email","password","sessionId","method","body","JSON","stringify","setItem","success","register","username","fullName","message","logout","updateProfile","updates","forgotPassword","resetPassword","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ss/Downloads/Code/Vibe_coding/SQL_practice_website/sql-practice-platform/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authUrl } from '../config/environment.js';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is authenticated on app load\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  const checkAuthStatus = async () => {\n    const storedToken = localStorage.getItem('token');\n    if (!storedToken) {\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const response = await fetch(authUrl('validate'), {\n        headers: {\n          'Authorization': `Bearer ${storedToken}`\n        }\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setUser(data.user);\n        setToken(storedToken);\n      } else {\n        // Token is invalid\n        localStorage.removeItem('token');\n        setToken(null);\n        setUser(null);\n      }\n    } catch (error) {\n      console.error('Auth check failed:', error);\n      localStorage.removeItem('token');\n      setToken(null);\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (email, password, sessionId) => {\n    try {\n      const response = await fetch(authUrl('login'), {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password, sessionId }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        setUser(data.user);\n        setToken(data.token);\n        localStorage.setItem('token', data.token);\n        return { success: true, user: data.user };\n      } else {\n        return { success: false, error: data.error };\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      return { success: false, error: 'Login failed. Please try again.' };\n    }\n  };\n\n  const register = async (email, password, username, fullName) => {\n    try {\n      const response = await fetch(authUrl('register'), {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password, username, fullName }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        return { success: true, message: data.message };\n      } else {\n        return { success: false, error: data.error };\n      }\n    } catch (error) {\n      console.error('Registration error:', error);\n      return { success: false, error: 'Registration failed. Please try again.' };\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('token');\n  };\n\n  const updateProfile = async (updates) => {\n    try {\n      const response = await fetch('http://localhost:5001/api/auth/profile', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(updates),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        setUser(data.user);\n        return { success: true, user: data.user };\n      } else {\n        return { success: false, error: data.error };\n      }\n    } catch (error) {\n      console.error('Profile update error:', error);\n      return { success: false, error: 'Profile update failed.' };\n    }\n  };\n\n  const forgotPassword = async (email) => {\n    try {\n      const response = await fetch('http://localhost:5001/api/auth/forgot-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email }),\n      });\n\n      const data = await response.json();\n      return { success: response.ok, message: data.message, error: data.error };\n    } catch (error) {\n      console.error('Forgot password error:', error);\n      return { success: false, error: 'Request failed. Please try again.' };\n    }\n  };\n\n  const resetPassword = async (token, password) => {\n    try {\n      const response = await fetch('http://localhost:5001/api/auth/reset-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ token, password }),\n      });\n\n      const data = await response.json();\n      return { success: response.ok, message: data.message, error: data.error };\n    } catch (error) {\n      console.error('Reset password error:', error);\n      return { success: false, error: 'Reset failed. Please try again.' };\n    }\n  };\n\n  const value = {\n    user,\n    token,\n    loading,\n    isAuthenticated: !!user,\n    login,\n    register,\n    logout,\n    updateProfile,\n    forgotPassword,\n    resetPassword,\n    checkAuthStatus\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,OAAO,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGT,UAAU,CAACM,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAACiB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EACjE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACAC,SAAS,CAAC,MAAM;IACdoB,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,MAAMC,WAAW,GAAGL,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACjD,IAAI,CAACI,WAAW,EAAE;MAChBF,UAAU,CAAC,KAAK,CAAC;MACjB;IACF;IAEA,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACtB,OAAO,CAAC,UAAU,CAAC,EAAE;QAChDuB,OAAO,EAAE;UACP,eAAe,EAAE,UAAUH,WAAW;QACxC;MACF,CAAC,CAAC;MAEF,IAAIC,QAAQ,CAACG,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCd,OAAO,CAACa,IAAI,CAACd,IAAI,CAAC;QAClBG,QAAQ,CAACM,WAAW,CAAC;MACvB,CAAC,MAAM;QACL;QACAL,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;QAChCb,QAAQ,CAAC,IAAI,CAAC;QACdF,OAAO,CAAC,IAAI,CAAC;MACf;IACF,CAAC,CAAC,OAAOgB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1Cb,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;MAChCb,QAAQ,CAAC,IAAI,CAAC;MACdF,OAAO,CAAC,IAAI,CAAC;IACf,CAAC,SAAS;MACRM,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMY,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,SAAS,KAAK;IAClD,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAACtB,OAAO,CAAC,OAAO,CAAC,EAAE;QAC7CkC,MAAM,EAAE,MAAM;QACdX,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDY,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEN,KAAK;UAAEC,QAAQ;UAAEC;QAAU,CAAC;MACrD,CAAC,CAAC;MAEF,MAAMR,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAElC,IAAIL,QAAQ,CAACG,EAAE,EAAE;QACfZ,OAAO,CAACa,IAAI,CAACd,IAAI,CAAC;QAClBG,QAAQ,CAACW,IAAI,CAACZ,KAAK,CAAC;QACpBE,YAAY,CAACuB,OAAO,CAAC,OAAO,EAAEb,IAAI,CAACZ,KAAK,CAAC;QACzC,OAAO;UAAE0B,OAAO,EAAE,IAAI;UAAE5B,IAAI,EAAEc,IAAI,CAACd;QAAK,CAAC;MAC3C,CAAC,MAAM;QACL,OAAO;UAAE4B,OAAO,EAAE,KAAK;UAAEX,KAAK,EAAEH,IAAI,CAACG;QAAM,CAAC;MAC9C;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,OAAO;QAAEW,OAAO,EAAE,KAAK;QAAEX,KAAK,EAAE;MAAkC,CAAC;IACrE;EACF,CAAC;EAED,MAAMY,QAAQ,GAAG,MAAAA,CAAOT,KAAK,EAAEC,QAAQ,EAAES,QAAQ,EAAEC,QAAQ,KAAK;IAC9D,IAAI;MACF,MAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAACtB,OAAO,CAAC,UAAU,CAAC,EAAE;QAChDkC,MAAM,EAAE,MAAM;QACdX,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDY,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEN,KAAK;UAAEC,QAAQ;UAAES,QAAQ;UAAEC;QAAS,CAAC;MAC9D,CAAC,CAAC;MAEF,MAAMjB,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAElC,IAAIL,QAAQ,CAACG,EAAE,EAAE;QACf,OAAO;UAAEe,OAAO,EAAE,IAAI;UAAEI,OAAO,EAAElB,IAAI,CAACkB;QAAQ,CAAC;MACjD,CAAC,MAAM;QACL,OAAO;UAAEJ,OAAO,EAAE,KAAK;UAAEX,KAAK,EAAEH,IAAI,CAACG;QAAM,CAAC;MAC9C;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,OAAO;QAAEW,OAAO,EAAE,KAAK;QAAEX,KAAK,EAAE;MAAyC,CAAC;IAC5E;EACF,CAAC;EAED,MAAMgB,MAAM,GAAGA,CAAA,KAAM;IACnBhC,OAAO,CAAC,IAAI,CAAC;IACbE,QAAQ,CAAC,IAAI,CAAC;IACdC,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;EAClC,CAAC;EAED,MAAMkB,aAAa,GAAG,MAAOC,OAAO,IAAK;IACvC,IAAI;MACF,MAAMzB,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwC,EAAE;QACrEY,MAAM,EAAE,KAAK;QACbX,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,UAAUV,KAAK;QAClC,CAAC;QACDsB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACS,OAAO;MAC9B,CAAC,CAAC;MAEF,MAAMrB,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAElC,IAAIL,QAAQ,CAACG,EAAE,EAAE;QACfZ,OAAO,CAACa,IAAI,CAACd,IAAI,CAAC;QAClB,OAAO;UAAE4B,OAAO,EAAE,IAAI;UAAE5B,IAAI,EAAEc,IAAI,CAACd;QAAK,CAAC;MAC3C,CAAC,MAAM;QACL,OAAO;UAAE4B,OAAO,EAAE,KAAK;UAAEX,KAAK,EAAEH,IAAI,CAACG;QAAM,CAAC;MAC9C;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAO;QAAEW,OAAO,EAAE,KAAK;QAAEX,KAAK,EAAE;MAAyB,CAAC;IAC5D;EACF,CAAC;EAED,MAAMmB,cAAc,GAAG,MAAOhB,KAAK,IAAK;IACtC,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,gDAAgD,EAAE;QAC7EY,MAAM,EAAE,MAAM;QACdX,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDY,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEN;QAAM,CAAC;MAChC,CAAC,CAAC;MAEF,MAAMN,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,OAAO;QAAEa,OAAO,EAAElB,QAAQ,CAACG,EAAE;QAAEmB,OAAO,EAAElB,IAAI,CAACkB,OAAO;QAAEf,KAAK,EAAEH,IAAI,CAACG;MAAM,CAAC;IAC3E,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,OAAO;QAAEW,OAAO,EAAE,KAAK;QAAEX,KAAK,EAAE;MAAoC,CAAC;IACvE;EACF,CAAC;EAED,MAAMoB,aAAa,GAAG,MAAAA,CAAOnC,KAAK,EAAEmB,QAAQ,KAAK;IAC/C,IAAI;MACF,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,+CAA+C,EAAE;QAC5EY,MAAM,EAAE,MAAM;QACdX,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDY,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAExB,KAAK;UAAEmB;QAAS,CAAC;MAC1C,CAAC,CAAC;MAEF,MAAMP,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,OAAO;QAAEa,OAAO,EAAElB,QAAQ,CAACG,EAAE;QAAEmB,OAAO,EAAElB,IAAI,CAACkB,OAAO;QAAEf,KAAK,EAAEH,IAAI,CAACG;MAAM,CAAC;IAC3E,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAO;QAAEW,OAAO,EAAE,KAAK;QAAEX,KAAK,EAAE;MAAkC,CAAC;IACrE;EACF,CAAC;EAED,MAAMqB,KAAK,GAAG;IACZtC,IAAI;IACJE,KAAK;IACLI,OAAO;IACPiC,eAAe,EAAE,CAAC,CAACvC,IAAI;IACvBmB,KAAK;IACLU,QAAQ;IACRI,MAAM;IACNC,aAAa;IACbE,cAAc;IACdC,aAAa;IACb7B;EACF,CAAC;EAED,oBACEjB,OAAA,CAACC,WAAW,CAACgD,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAAxC,QAAA,EAChCA;EAAQ;IAAA2C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC7C,GAAA,CAnLWF,YAAY;AAAAgD,EAAA,GAAZhD,YAAY;AAAA,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}