{"ast":null,"code":"var _jsxFileName = \"/Users/ss/Downloads/Code/Vibe_coding/SQL_practice_website/sql-practice-platform/frontend/src/contexts/ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport function useTheme() {\n  _s();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n_s(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport function ThemeProvider({\n  children\n}) {\n  _s2();\n  const [theme, setTheme] = useState(() => {\n    // Check localStorage first\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      return savedTheme;\n    }\n\n    // Check system preference\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      return 'dark';\n    }\n    return 'light';\n  });\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    // Remove previous theme classes\n    root.classList.remove('light', 'dark');\n\n    // Add current theme class\n    root.classList.add(theme);\n\n    // Save to localStorage\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  // Listen for system theme changes\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = e => {\n      // Only update if user hasn't manually set a preference\n      const savedTheme = localStorage.getItem('theme');\n      if (!savedTheme) {\n        setTheme(e.matches ? 'dark' : 'light');\n      }\n    };\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n  const setLightTheme = () => setTheme('light');\n  const setDarkTheme = () => setTheme('dark');\n  const setSystemTheme = () => {\n    localStorage.removeItem('theme');\n    const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n    setTheme(systemTheme);\n  };\n  const value = {\n    theme,\n    toggleTheme,\n    setLightTheme,\n    setDarkTheme,\n    setSystemTheme,\n    isLight: theme === 'light',\n    isDark: theme === 'dark'\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s2(ThemeProvider, \"kgV7CSvk0mo7Iild5Xt99lfTiaU=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsxDEV","_jsxDEV","ThemeContext","useTheme","_s","context","Error","ThemeProvider","children","_s2","theme","setTheme","savedTheme","localStorage","getItem","window","matchMedia","matches","root","document","documentElement","classList","remove","add","setItem","mediaQuery","handleChange","e","addEventListener","removeEventListener","toggleTheme","prevTheme","setLightTheme","setDarkTheme","setSystemTheme","removeItem","systemTheme","value","isLight","isDark","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ss/Downloads/Code/Vibe_coding/SQL_practice_website/sql-practice-platform/frontend/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\n\nconst ThemeContext = createContext();\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n\nexport function ThemeProvider({ children }) {\n  const [theme, setTheme] = useState(() => {\n    // Check localStorage first\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      return savedTheme;\n    }\n    \n    // Check system preference\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      return 'dark';\n    }\n    \n    return 'light';\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    \n    // Remove previous theme classes\n    root.classList.remove('light', 'dark');\n    \n    // Add current theme class\n    root.classList.add(theme);\n    \n    // Save to localStorage\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  // Listen for system theme changes\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    \n    const handleChange = (e) => {\n      // Only update if user hasn't manually set a preference\n      const savedTheme = localStorage.getItem('theme');\n      if (!savedTheme) {\n        setTheme(e.matches ? 'dark' : 'light');\n      }\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n\n  const setLightTheme = () => setTheme('light');\n  const setDarkTheme = () => setTheme('dark');\n  const setSystemTheme = () => {\n    localStorage.removeItem('theme');\n    const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n    setTheme(systemTheme);\n  };\n\n  const value = {\n    theme,\n    toggleTheme,\n    setLightTheme,\n    setDarkTheme,\n    setSystemTheme,\n    isLight: theme === 'light',\n    isDark: theme === 'dark'\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;AAEpC,OAAO,SAASO,QAAQA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAMC,OAAO,GAAGR,UAAU,CAACK,YAAY,CAAC;EACxC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB;AAACD,EAAA,CANeD,QAAQ;AAQxB,OAAO,SAASI,aAAaA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EAC1C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,MAAM;IACvC;IACA,MAAMa,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD,IAAIF,UAAU,EAAE;MACd,OAAOA,UAAU;IACnB;;IAEA;IACA,IAAIG,MAAM,CAACC,UAAU,IAAID,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,EAAE;MAClF,OAAO,MAAM;IACf;IAEA,OAAO,OAAO;EAChB,CAAC,CAAC;EAEFnB,SAAS,CAAC,MAAM;IACd,MAAMoB,IAAI,GAAGH,MAAM,CAACI,QAAQ,CAACC,eAAe;;IAE5C;IACAF,IAAI,CAACG,SAAS,CAACC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC;;IAEtC;IACAJ,IAAI,CAACG,SAAS,CAACE,GAAG,CAACb,KAAK,CAAC;;IAEzB;IACAG,YAAY,CAACW,OAAO,CAAC,OAAO,EAAEd,KAAK,CAAC;EACtC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;;EAEX;EACAZ,SAAS,CAAC,MAAM;IACd,MAAM2B,UAAU,GAAGV,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC;IAEpE,MAAMU,YAAY,GAAIC,CAAC,IAAK;MAC1B;MACA,MAAMf,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAChD,IAAI,CAACF,UAAU,EAAE;QACfD,QAAQ,CAACgB,CAAC,CAACV,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;MACxC;IACF,CAAC;IAEDQ,UAAU,CAACG,gBAAgB,CAAC,QAAQ,EAAEF,YAAY,CAAC;IACnD,OAAO,MAAMD,UAAU,CAACI,mBAAmB,CAAC,QAAQ,EAAEH,YAAY,CAAC;EACrE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,WAAW,GAAGA,CAAA,KAAM;IACxBnB,QAAQ,CAACoB,SAAS,IAAIA,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;EACjE,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAMrB,QAAQ,CAAC,OAAO,CAAC;EAC7C,MAAMsB,YAAY,GAAGA,CAAA,KAAMtB,QAAQ,CAAC,MAAM,CAAC;EAC3C,MAAMuB,cAAc,GAAGA,CAAA,KAAM;IAC3BrB,YAAY,CAACsB,UAAU,CAAC,OAAO,CAAC;IAChC,MAAMC,WAAW,GAAGrB,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,GAAG,MAAM,GAAG,OAAO;IAChGN,QAAQ,CAACyB,WAAW,CAAC;EACvB,CAAC;EAED,MAAMC,KAAK,GAAG;IACZ3B,KAAK;IACLoB,WAAW;IACXE,aAAa;IACbC,YAAY;IACZC,cAAc;IACdI,OAAO,EAAE5B,KAAK,KAAK,OAAO;IAC1B6B,MAAM,EAAE7B,KAAK,KAAK;EACpB,CAAC;EAED,oBACET,OAAA,CAACC,YAAY,CAACsC,QAAQ;IAACH,KAAK,EAAEA,KAAM;IAAA7B,QAAA,EACjCA;EAAQ;IAAAiC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B;AAACnC,GAAA,CAxEeF,aAAa;AAAAsC,EAAA,GAAbtC,aAAa;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}