{"ast":null,"code":"// Temporary mock data for learning system demonstration\n// This will be used until backend is restarted with new learning routes\n\nexport const mockLearningModules = [{\n  id: 'basic-queries',\n  title: 'Basic SQL Queries',\n  description: 'Learn the fundamentals of SQL with SELECT, WHERE, and ORDER BY',\n  difficulty: 'beginner',\n  estimatedTime: '45 minutes',\n  prerequisites: [],\n  conceptCount: 3\n}, {\n  id: 'aggregation',\n  title: 'Aggregation Functions',\n  description: 'Master COUNT, SUM, AVG, MIN, MAX and GROUP BY operations',\n  difficulty: 'intermediate',\n  estimatedTime: '60 minutes',\n  prerequisites: ['basic-queries'],\n  conceptCount: 3\n}, {\n  id: 'joins',\n  title: 'SQL Joins',\n  description: 'Connect data across multiple tables with INNER, LEFT, RIGHT, and FULL joins',\n  difficulty: 'intermediate',\n  estimatedTime: '75 minutes',\n  prerequisites: ['basic-queries'],\n  conceptCount: 4\n}, {\n  id: 'subqueries',\n  title: 'Subqueries',\n  description: 'Learn nested queries, correlated subqueries, and EXISTS operations',\n  difficulty: 'intermediate',\n  estimatedTime: '50 minutes',\n  prerequisites: ['basic-queries', 'aggregation'],\n  conceptCount: 2\n}, {\n  id: 'window-functions',\n  title: 'Window Functions',\n  description: 'Advanced analytics with ROW_NUMBER, RANK, DENSE_RANK, and aggregate window functions',\n  difficulty: 'advanced',\n  estimatedTime: '90 minutes',\n  prerequisites: ['basic-queries', 'aggregation', 'joins'],\n  conceptCount: 2\n}, {\n  id: 'advanced-topics',\n  title: 'Advanced SQL Topics',\n  description: 'CTEs, recursive queries, pivot operations, and performance optimization',\n  difficulty: 'advanced',\n  estimatedTime: '120 minutes',\n  prerequisites: ['basic-queries', 'aggregation', 'joins', 'subqueries', 'window-functions'],\n  conceptCount: 2\n}];\nexport const mockLearningPaths = [{\n  id: 'sql-fundamentals',\n  title: 'SQL Fundamentals',\n  description: 'Master the basics of SQL querying',\n  modules: ['basic-queries', 'aggregation', 'joins'],\n  estimatedTime: '3-4 hours'\n}, {\n  id: 'intermediate-sql',\n  title: 'Intermediate SQL',\n  description: 'Advanced querying techniques',\n  modules: ['subqueries', 'window-functions'],\n  estimatedTime: '2-3 hours'\n}, {\n  id: 'advanced-sql',\n  title: 'Advanced SQL',\n  description: 'Expert-level SQL concepts',\n  modules: ['advanced-topics'],\n  estimatedTime: '2-3 hours'\n}];\nexport const mockUserProgress = {\n  userId: 'demo-user',\n  completedModules: [],\n  currentModule: 'basic-queries',\n  currentConcept: 'select-basics',\n  totalConceptsCompleted: 0,\n  totalConcepts: 16,\n  completionPercentage: 0\n};\nexport const mockModuleContent = {\n  'basic-queries': {\n    id: 'basic-queries',\n    title: 'Basic SQL Queries',\n    description: 'Learn the fundamentals of SQL with SELECT, WHERE, and ORDER BY',\n    difficulty: 'beginner',\n    estimatedTime: '45 minutes',\n    prerequisites: [],\n    concepts: [{\n      id: 'select-basics',\n      title: 'SELECT Statement Basics',\n      theory: {\n        explanation: 'The SELECT statement is the foundation of SQL queries. It retrieves data from database tables.',\n        syntax: 'SELECT column1, column2 FROM table_name;',\n        keyPoints: ['SELECT specifies which columns to retrieve', 'FROM specifies which table to query', 'Use * to select all columns', 'Column names are case-insensitive']\n      },\n      examples: [{\n        title: 'Select all employees',\n        query: 'SELECT * FROM employees;',\n        explanation: 'Retrieves all columns and rows from the employees table'\n      }, {\n        title: 'Select specific columns',\n        query: 'SELECT first_name, last_name, salary FROM employees;',\n        explanation: 'Retrieves only the specified columns'\n      }],\n      practice: [{\n        instruction: 'Select all products from the products table',\n        expectedQuery: 'SELECT * FROM products;',\n        tables: ['products'],\n        hint: 'Use SELECT * to get all columns'\n      }, {\n        instruction: 'Select only product_name and price from products',\n        expectedQuery: 'SELECT product_name, price FROM products;',\n        tables: ['products'],\n        hint: 'List the column names separated by commas'\n      }]\n    }, {\n      id: 'where-clause',\n      title: 'WHERE Clause Filtering',\n      theory: {\n        explanation: 'The WHERE clause filters rows based on specified conditions.',\n        syntax: 'SELECT columns FROM table WHERE condition;',\n        keyPoints: ['WHERE filters rows that meet specific criteria', 'Common operators: =, !=, <, >, <=, >=', 'Use quotes for text values', 'Combine conditions with AND, OR']\n      },\n      examples: [{\n        title: 'Filter by salary',\n        query: 'SELECT * FROM employees WHERE salary > 50000;',\n        explanation: 'Shows employees earning more than $50,000'\n      }, {\n        title: 'Filter by department',\n        query: \"SELECT * FROM employees WHERE department = 'Engineering';\",\n        explanation: 'Shows only engineering department employees'\n      }],\n      practice: [{\n        instruction: 'Find products with price greater than 100',\n        expectedQuery: 'SELECT * FROM products WHERE price > 100;',\n        tables: ['products'],\n        hint: 'Use the > operator to compare prices'\n      }]\n    }, {\n      id: 'order-by',\n      title: 'ORDER BY Sorting',\n      theory: {\n        explanation: 'ORDER BY sorts query results in ascending or descending order.',\n        syntax: 'SELECT columns FROM table ORDER BY column [ASC|DESC];',\n        keyPoints: ['ASC is ascending (default)', 'DESC is descending', 'Can sort by multiple columns', 'NULL values appear first in ASC, last in DESC']\n      },\n      examples: [{\n        title: 'Sort by salary descending',\n        query: 'SELECT * FROM employees ORDER BY salary DESC;',\n        explanation: 'Shows employees from highest to lowest salary'\n      }],\n      practice: [{\n        instruction: 'Sort products by price in ascending order',\n        expectedQuery: 'SELECT * FROM products ORDER BY price ASC;',\n        tables: ['products'],\n        hint: 'Use ORDER BY with ASC (or leave it off since ASC is default)'\n      }]\n    }]\n  }\n};","map":{"version":3,"names":["mockLearningModules","id","title","description","difficulty","estimatedTime","prerequisites","conceptCount","mockLearningPaths","modules","mockUserProgress","userId","completedModules","currentModule","currentConcept","totalConceptsCompleted","totalConcepts","completionPercentage","mockModuleContent","concepts","theory","explanation","syntax","keyPoints","examples","query","practice","instruction","expectedQuery","tables","hint"],"sources":["/Users/ss/Downloads/Code/Vibe_coding/SQL_practice_website/sql-practice-platform/frontend/src/data/mockLearningData.js"],"sourcesContent":["// Temporary mock data for learning system demonstration\n// This will be used until backend is restarted with new learning routes\n\nexport const mockLearningModules = [\n  {\n    id: 'basic-queries',\n    title: 'Basic SQL Queries',\n    description: 'Learn the fundamentals of SQL with SELECT, WHERE, and ORDER BY',\n    difficulty: 'beginner',\n    estimatedTime: '45 minutes',\n    prerequisites: [],\n    conceptCount: 3\n  },\n  {\n    id: 'aggregation',\n    title: 'Aggregation Functions',\n    description: 'Master COUNT, SUM, AVG, MIN, MAX and GROUP BY operations',\n    difficulty: 'intermediate',\n    estimatedTime: '60 minutes',\n    prerequisites: ['basic-queries'],\n    conceptCount: 3\n  },\n  {\n    id: 'joins',\n    title: 'SQL Joins',\n    description: 'Connect data across multiple tables with INNER, LEFT, RIGHT, and FULL joins',\n    difficulty: 'intermediate',\n    estimatedTime: '75 minutes',\n    prerequisites: ['basic-queries'],\n    conceptCount: 4\n  },\n  {\n    id: 'subqueries',\n    title: 'Subqueries',\n    description: 'Learn nested queries, correlated subqueries, and EXISTS operations',\n    difficulty: 'intermediate',\n    estimatedTime: '50 minutes',\n    prerequisites: ['basic-queries', 'aggregation'],\n    conceptCount: 2\n  },\n  {\n    id: 'window-functions',\n    title: 'Window Functions',\n    description: 'Advanced analytics with ROW_NUMBER, RANK, DENSE_RANK, and aggregate window functions',\n    difficulty: 'advanced',\n    estimatedTime: '90 minutes',\n    prerequisites: ['basic-queries', 'aggregation', 'joins'],\n    conceptCount: 2\n  },\n  {\n    id: 'advanced-topics',\n    title: 'Advanced SQL Topics',\n    description: 'CTEs, recursive queries, pivot operations, and performance optimization',\n    difficulty: 'advanced',\n    estimatedTime: '120 minutes',\n    prerequisites: ['basic-queries', 'aggregation', 'joins', 'subqueries', 'window-functions'],\n    conceptCount: 2\n  }\n];\n\nexport const mockLearningPaths = [\n  {\n    id: 'sql-fundamentals',\n    title: 'SQL Fundamentals',\n    description: 'Master the basics of SQL querying',\n    modules: ['basic-queries', 'aggregation', 'joins'],\n    estimatedTime: '3-4 hours'\n  },\n  {\n    id: 'intermediate-sql',\n    title: 'Intermediate SQL',\n    description: 'Advanced querying techniques',\n    modules: ['subqueries', 'window-functions'],\n    estimatedTime: '2-3 hours'\n  },\n  {\n    id: 'advanced-sql',\n    title: 'Advanced SQL',\n    description: 'Expert-level SQL concepts',\n    modules: ['advanced-topics'],\n    estimatedTime: '2-3 hours'\n  }\n];\n\nexport const mockUserProgress = {\n  userId: 'demo-user',\n  completedModules: [],\n  currentModule: 'basic-queries',\n  currentConcept: 'select-basics',\n  totalConceptsCompleted: 0,\n  totalConcepts: 16,\n  completionPercentage: 0\n};\n\nexport const mockModuleContent = {\n  'basic-queries': {\n    id: 'basic-queries',\n    title: 'Basic SQL Queries',\n    description: 'Learn the fundamentals of SQL with SELECT, WHERE, and ORDER BY',\n    difficulty: 'beginner',\n    estimatedTime: '45 minutes',\n    prerequisites: [],\n    concepts: [\n      {\n        id: 'select-basics',\n        title: 'SELECT Statement Basics',\n        theory: {\n          explanation: 'The SELECT statement is the foundation of SQL queries. It retrieves data from database tables.',\n          syntax: 'SELECT column1, column2 FROM table_name;',\n          keyPoints: [\n            'SELECT specifies which columns to retrieve',\n            'FROM specifies which table to query',\n            'Use * to select all columns',\n            'Column names are case-insensitive'\n          ]\n        },\n        examples: [\n          {\n            title: 'Select all employees',\n            query: 'SELECT * FROM employees;',\n            explanation: 'Retrieves all columns and rows from the employees table'\n          },\n          {\n            title: 'Select specific columns',\n            query: 'SELECT first_name, last_name, salary FROM employees;',\n            explanation: 'Retrieves only the specified columns'\n          }\n        ],\n        practice: [\n          {\n            instruction: 'Select all products from the products table',\n            expectedQuery: 'SELECT * FROM products;',\n            tables: ['products'],\n            hint: 'Use SELECT * to get all columns'\n          },\n          {\n            instruction: 'Select only product_name and price from products',\n            expectedQuery: 'SELECT product_name, price FROM products;',\n            tables: ['products'],\n            hint: 'List the column names separated by commas'\n          }\n        ]\n      },\n      {\n        id: 'where-clause',\n        title: 'WHERE Clause Filtering',\n        theory: {\n          explanation: 'The WHERE clause filters rows based on specified conditions.',\n          syntax: 'SELECT columns FROM table WHERE condition;',\n          keyPoints: [\n            'WHERE filters rows that meet specific criteria',\n            'Common operators: =, !=, <, >, <=, >=',\n            'Use quotes for text values',\n            'Combine conditions with AND, OR'\n          ]\n        },\n        examples: [\n          {\n            title: 'Filter by salary',\n            query: 'SELECT * FROM employees WHERE salary > 50000;',\n            explanation: 'Shows employees earning more than $50,000'\n          },\n          {\n            title: 'Filter by department',\n            query: \"SELECT * FROM employees WHERE department = 'Engineering';\",\n            explanation: 'Shows only engineering department employees'\n          }\n        ],\n        practice: [\n          {\n            instruction: 'Find products with price greater than 100',\n            expectedQuery: 'SELECT * FROM products WHERE price > 100;',\n            tables: ['products'],\n            hint: 'Use the > operator to compare prices'\n          }\n        ]\n      },\n      {\n        id: 'order-by',\n        title: 'ORDER BY Sorting',\n        theory: {\n          explanation: 'ORDER BY sorts query results in ascending or descending order.',\n          syntax: 'SELECT columns FROM table ORDER BY column [ASC|DESC];',\n          keyPoints: [\n            'ASC is ascending (default)',\n            'DESC is descending', \n            'Can sort by multiple columns',\n            'NULL values appear first in ASC, last in DESC'\n          ]\n        },\n        examples: [\n          {\n            title: 'Sort by salary descending',\n            query: 'SELECT * FROM employees ORDER BY salary DESC;',\n            explanation: 'Shows employees from highest to lowest salary'\n          }\n        ],\n        practice: [\n          {\n            instruction: 'Sort products by price in ascending order',\n            expectedQuery: 'SELECT * FROM products ORDER BY price ASC;',\n            tables: ['products'],\n            hint: 'Use ORDER BY with ASC (or leave it off since ASC is default)'\n          }\n        ]\n      }\n    ]\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}