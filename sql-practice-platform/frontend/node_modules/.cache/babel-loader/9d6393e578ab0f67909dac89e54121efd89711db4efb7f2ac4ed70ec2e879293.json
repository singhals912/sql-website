{"ast":null,"code":"class ProgressService {\n  constructor() {\n    this.baseURL = 'http://localhost:5001/api/progress';\n    this.sessionId = this.getSessionId();\n    this.cache = new Map();\n    this.cacheTimeout = 5000; // 5 seconds\n  }\n\n  // Get or create session ID\n  getSessionId() {\n    let sessionId = localStorage.getItem('sql_practice_session_id');\n    if (!sessionId) {\n      sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n      localStorage.setItem('sql_practice_session_id', sessionId);\n    }\n    return sessionId;\n  }\n\n  // Initialize session with backend\n  async initializeSession() {\n    try {\n      const response = await fetch(`${this.baseURL}/session`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Session-ID': this.sessionId\n        },\n        body: JSON.stringify({\n          ipAddress: null,\n          // Browser can't access this\n          userAgent: navigator.userAgent\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        // Update session ID if backend created a new one\n        this.sessionId = data.sessionId;\n        localStorage.setItem('sql_practice_session_id', this.sessionId);\n        return data;\n      }\n      throw new Error(data.error || 'Failed to initialize session');\n    } catch (error) {\n      console.error('Failed to initialize session:', error);\n      throw error;\n    }\n  }\n\n  // Get comprehensive progress overview\n  async getProgressOverview() {\n    try {\n      const response = await fetch(`${this.baseURL}/overview`, {\n        headers: {\n          'X-Session-ID': this.sessionId\n        }\n      });\n      const data = await response.json();\n      if (data.success) {\n        return data.progress;\n      }\n      throw new Error(data.error || 'Failed to get progress overview');\n    } catch (error) {\n      console.error('Failed to get progress overview:', error);\n      throw error;\n    }\n  }\n\n  // Get detailed problem-by-problem progress\n  async getDetailedProgress() {\n    try {\n      const response = await fetch(`${this.baseURL}/detailed`, {\n        headers: {\n          'X-Session-ID': this.sessionId\n        }\n      });\n      const data = await response.json();\n      if (data.success) {\n        return data.problems;\n      }\n      throw new Error(data.error || 'Failed to get detailed progress');\n    } catch (error) {\n      console.error('Failed to get detailed progress:', error);\n      throw error;\n    }\n  }\n\n  // Get user statistics\n  async getStats() {\n    try {\n      const response = await fetch(`${this.baseURL}/stats`, {\n        headers: {\n          'X-Session-ID': this.sessionId\n        }\n      });\n      const data = await response.json();\n      if (data.success) {\n        return data.stats;\n      }\n      throw new Error(data.error || 'Failed to get stats');\n    } catch (error) {\n      console.error('Failed to get stats:', error);\n      throw error;\n    }\n  }\n\n  // Get leaderboard\n  async getLeaderboard(limit = 10) {\n    try {\n      const response = await fetch(`${this.baseURL}/leaderboard?limit=${limit}`);\n      const data = await response.json();\n      if (data.success) {\n        return data.leaderboard;\n      }\n      throw new Error(data.error || 'Failed to get leaderboard');\n    } catch (error) {\n      console.error('Failed to get leaderboard:', error);\n      throw error;\n    }\n  }\n\n  // Send heartbeat to keep session active\n  async sendHeartbeat() {\n    try {\n      await fetch(`${this.baseURL}/heartbeat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Session-ID': this.sessionId\n        }\n      });\n    } catch (error) {\n      console.error('Heartbeat failed:', error);\n    }\n  }\n\n  // Record manual attempt (if needed)\n  async recordAttempt(problemId, problemNumericId, query, isCorrect, executionTimeMs, errorMessage = null, hintUsed = false, solutionViewed = false) {\n    try {\n      const response = await fetch(`${this.baseURL}/attempt`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Session-ID': this.sessionId\n        },\n        body: JSON.stringify({\n          problemId,\n          problemNumericId,\n          query,\n          isCorrect,\n          executionTimeMs,\n          errorMessage,\n          hintUsed,\n          solutionViewed\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        return data.attempt;\n      }\n      throw new Error(data.error || 'Failed to record attempt');\n    } catch (error) {\n      console.error('Failed to record attempt:', error);\n      throw error;\n    }\n  }\n}\nexport default new ProgressService();","map":{"version":3,"names":["ProgressService","constructor","baseURL","sessionId","getSessionId","cache","Map","cacheTimeout","localStorage","getItem","Date","now","Math","random","toString","substr","setItem","initializeSession","response","fetch","method","headers","body","JSON","stringify","ipAddress","userAgent","navigator","data","json","success","Error","error","console","getProgressOverview","progress","getDetailedProgress","problems","getStats","stats","getLeaderboard","limit","leaderboard","sendHeartbeat","recordAttempt","problemId","problemNumericId","query","isCorrect","executionTimeMs","errorMessage","hintUsed","solutionViewed","attempt"],"sources":["/Users/ss/Downloads/Code/Vibe_coding/SQL_practice_website/sql-practice-platform/frontend/src/services/progressService.js"],"sourcesContent":["class ProgressService {\n  constructor() {\n    this.baseURL = 'http://localhost:5001/api/progress';\n    this.sessionId = this.getSessionId();\n    this.cache = new Map();\n    this.cacheTimeout = 5000; // 5 seconds\n  }\n\n  // Get or create session ID\n  getSessionId() {\n    let sessionId = localStorage.getItem('sql_practice_session_id');\n    if (!sessionId) {\n      sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n      localStorage.setItem('sql_practice_session_id', sessionId);\n    }\n    return sessionId;\n  }\n\n  // Initialize session with backend\n  async initializeSession() {\n    try {\n      const response = await fetch(`${this.baseURL}/session`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Session-ID': this.sessionId\n        },\n        body: JSON.stringify({\n          ipAddress: null, // Browser can't access this\n          userAgent: navigator.userAgent\n        })\n      });\n      \n      const data = await response.json();\n      if (data.success) {\n        // Update session ID if backend created a new one\n        this.sessionId = data.sessionId;\n        localStorage.setItem('sql_practice_session_id', this.sessionId);\n        return data;\n      }\n      throw new Error(data.error || 'Failed to initialize session');\n    } catch (error) {\n      console.error('Failed to initialize session:', error);\n      throw error;\n    }\n  }\n\n  // Get comprehensive progress overview\n  async getProgressOverview() {\n    try {\n      const response = await fetch(`${this.baseURL}/overview`, {\n        headers: {\n          'X-Session-ID': this.sessionId\n        }\n      });\n      \n      const data = await response.json();\n      if (data.success) {\n        return data.progress;\n      }\n      throw new Error(data.error || 'Failed to get progress overview');\n    } catch (error) {\n      console.error('Failed to get progress overview:', error);\n      throw error;\n    }\n  }\n\n  // Get detailed problem-by-problem progress\n  async getDetailedProgress() {\n    try {\n      const response = await fetch(`${this.baseURL}/detailed`, {\n        headers: {\n          'X-Session-ID': this.sessionId\n        }\n      });\n      \n      const data = await response.json();\n      if (data.success) {\n        return data.problems;\n      }\n      throw new Error(data.error || 'Failed to get detailed progress');\n    } catch (error) {\n      console.error('Failed to get detailed progress:', error);\n      throw error;\n    }\n  }\n\n  // Get user statistics\n  async getStats() {\n    try {\n      const response = await fetch(`${this.baseURL}/stats`, {\n        headers: {\n          'X-Session-ID': this.sessionId\n        }\n      });\n      \n      const data = await response.json();\n      if (data.success) {\n        return data.stats;\n      }\n      throw new Error(data.error || 'Failed to get stats');\n    } catch (error) {\n      console.error('Failed to get stats:', error);\n      throw error;\n    }\n  }\n\n  // Get leaderboard\n  async getLeaderboard(limit = 10) {\n    try {\n      const response = await fetch(`${this.baseURL}/leaderboard?limit=${limit}`);\n      const data = await response.json();\n      \n      if (data.success) {\n        return data.leaderboard;\n      }\n      throw new Error(data.error || 'Failed to get leaderboard');\n    } catch (error) {\n      console.error('Failed to get leaderboard:', error);\n      throw error;\n    }\n  }\n\n  // Send heartbeat to keep session active\n  async sendHeartbeat() {\n    try {\n      await fetch(`${this.baseURL}/heartbeat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Session-ID': this.sessionId\n        }\n      });\n    } catch (error) {\n      console.error('Heartbeat failed:', error);\n    }\n  }\n\n  // Record manual attempt (if needed)\n  async recordAttempt(problemId, problemNumericId, query, isCorrect, executionTimeMs, errorMessage = null, hintUsed = false, solutionViewed = false) {\n    try {\n      const response = await fetch(`${this.baseURL}/attempt`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Session-ID': this.sessionId\n        },\n        body: JSON.stringify({\n          problemId,\n          problemNumericId,\n          query,\n          isCorrect,\n          executionTimeMs,\n          errorMessage,\n          hintUsed,\n          solutionViewed\n        })\n      });\n      \n      const data = await response.json();\n      if (data.success) {\n        return data.attempt;\n      }\n      throw new Error(data.error || 'Failed to record attempt');\n    } catch (error) {\n      console.error('Failed to record attempt:', error);\n      throw error;\n    }\n  }\n}\n\nexport default new ProgressService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}