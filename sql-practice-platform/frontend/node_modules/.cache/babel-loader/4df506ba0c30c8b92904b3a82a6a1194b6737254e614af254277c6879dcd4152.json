{"ast":null,"code":"import config,{progressUrl}from'../config/environment.js';class ProgressService{constructor(){this.baseURL=progressUrl();this.sessionId=this.getSessionId();this.cache=new Map();this.cacheTimeout=config.CACHE_TIMEOUT;}// Get or create session ID\ngetSessionId(){let sessionId=localStorage.getItem('sql_practice_session_id');if(!sessionId){sessionId=config.SESSION_PREFIX+Date.now()+'_'+Math.random().toString(36).substr(2,9);localStorage.setItem('sql_practice_session_id',sessionId);}return sessionId;}// Initialize session with backend\nasync initializeSession(){try{const response=await fetch(\"\".concat(this.baseURL,\"/session\"),{method:'POST',headers:{'Content-Type':'application/json','X-Session-ID':this.sessionId},body:JSON.stringify({ipAddress:null,// Browser can't access this\nuserAgent:navigator.userAgent})});const data=await response.json();if(data.success){// Update session ID if backend created a new one\nthis.sessionId=data.sessionId;localStorage.setItem('sql_practice_session_id',this.sessionId);return data;}throw new Error(data.error||'Failed to initialize session');}catch(error){console.error('Failed to initialize session:',error);throw error;}}// Check cache before making API call\ngetCachedData(key){const cached=this.cache.get(key);if(cached&&Date.now()-cached.timestamp<this.cacheTimeout){return cached.data;}return null;}// Set cache data\nsetCachedData(key,data){this.cache.set(key,{data,timestamp:Date.now()});}// Clear cache when progress updates\nclearCache(){this.cache.clear();console.log('DEBUG: Progress cache cleared');}// Get comprehensive progress overview\nasync getProgressOverview(){const cacheKey='overview';const cached=this.getCachedData(cacheKey);if(cached){return cached;}try{const response=await fetch(\"\".concat(this.baseURL,\"/overview\"),{headers:{'X-Session-ID':this.sessionId}});const data=await response.json();if(data.success){this.setCachedData(cacheKey,data.progress);return data.progress;}throw new Error(data.error||'Failed to get progress overview');}catch(error){console.error('Failed to get progress overview:',error);throw error;}}// Get detailed problem-by-problem progress\nasync getDetailedProgress(){const cacheKey='detailed';const cached=this.getCachedData(cacheKey);if(cached){return cached;}try{const response=await fetch(\"\".concat(this.baseURL,\"/detailed\"),{headers:{'X-Session-ID':this.sessionId}});const data=await response.json();if(data.success){this.setCachedData(cacheKey,data.problems);return data.problems;}throw new Error(data.error||'Failed to get detailed progress');}catch(error){console.error('Failed to get detailed progress:',error);throw error;}}// Get user statistics\nasync getStats(){try{const response=await fetch(\"\".concat(this.baseURL,\"/stats\"),{headers:{'X-Session-ID':this.sessionId}});const data=await response.json();if(data.success){return data.stats;}throw new Error(data.error||'Failed to get stats');}catch(error){console.error('Failed to get stats:',error);throw error;}}// Get leaderboard\nasync getLeaderboard(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;try{const response=await fetch(\"\".concat(this.baseURL,\"/leaderboard?limit=\").concat(limit));const data=await response.json();if(data.success){return data.leaderboard;}throw new Error(data.error||'Failed to get leaderboard');}catch(error){console.error('Failed to get leaderboard:',error);throw error;}}// Send heartbeat to keep session active\nasync sendHeartbeat(){try{await fetch(\"\".concat(this.baseURL,\"/heartbeat\"),{method:'POST',headers:{'Content-Type':'application/json','X-Session-ID':this.sessionId}});}catch(error){console.error('Heartbeat failed:',error);}}// Record manual attempt (if needed)\nasync recordAttempt(problemId,problemNumericId,query,isCorrect,executionTimeMs){let errorMessage=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;let hintUsed=arguments.length>6&&arguments[6]!==undefined?arguments[6]:false;let solutionViewed=arguments.length>7&&arguments[7]!==undefined?arguments[7]:false;try{const response=await fetch(\"\".concat(this.baseURL,\"/attempt\"),{method:'POST',headers:{'Content-Type':'application/json','X-Session-ID':this.sessionId},body:JSON.stringify({problemId,problemNumericId,query,isCorrect,executionTimeMs,errorMessage,hintUsed,solutionViewed})});const data=await response.json();if(data.success){return data.attempt;}throw new Error(data.error||'Failed to record attempt');}catch(error){console.error('Failed to record attempt:',error);throw error;}}}export default new ProgressService();","map":{"version":3,"names":["config","progressUrl","ProgressService","constructor","baseURL","sessionId","getSessionId","cache","Map","cacheTimeout","CACHE_TIMEOUT","localStorage","getItem","SESSION_PREFIX","Date","now","Math","random","toString","substr","setItem","initializeSession","response","fetch","concat","method","headers","body","JSON","stringify","ipAddress","userAgent","navigator","data","json","success","Error","error","console","getCachedData","key","cached","get","timestamp","setCachedData","set","clearCache","clear","log","getProgressOverview","cacheKey","progress","getDetailedProgress","problems","getStats","stats","getLeaderboard","limit","arguments","length","undefined","leaderboard","sendHeartbeat","recordAttempt","problemId","problemNumericId","query","isCorrect","executionTimeMs","errorMessage","hintUsed","solutionViewed","attempt"],"sources":["/Users/ss/Downloads/Code/Vibe_coding/SQL_practice_website/sql-practice-platform/frontend/src/services/progressService.js"],"sourcesContent":["import config, { progressUrl } from '../config/environment.js';\n\nclass ProgressService {\n  constructor() {\n    this.baseURL = progressUrl();\n    this.sessionId = this.getSessionId();\n    this.cache = new Map();\n    this.cacheTimeout = config.CACHE_TIMEOUT;\n  }\n\n  // Get or create session ID\n  getSessionId() {\n    let sessionId = localStorage.getItem('sql_practice_session_id');\n    if (!sessionId) {\n      sessionId = config.SESSION_PREFIX + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n      localStorage.setItem('sql_practice_session_id', sessionId);\n    }\n    return sessionId;\n  }\n\n  // Initialize session with backend\n  async initializeSession() {\n    try {\n      const response = await fetch(`${this.baseURL}/session`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Session-ID': this.sessionId\n        },\n        body: JSON.stringify({\n          ipAddress: null, // Browser can't access this\n          userAgent: navigator.userAgent\n        })\n      });\n      \n      const data = await response.json();\n      if (data.success) {\n        // Update session ID if backend created a new one\n        this.sessionId = data.sessionId;\n        localStorage.setItem('sql_practice_session_id', this.sessionId);\n        return data;\n      }\n      throw new Error(data.error || 'Failed to initialize session');\n    } catch (error) {\n      console.error('Failed to initialize session:', error);\n      throw error;\n    }\n  }\n\n  // Check cache before making API call\n  getCachedData(key) {\n    const cached = this.cache.get(key);\n    if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {\n      return cached.data;\n    }\n    return null;\n  }\n\n  // Set cache data\n  setCachedData(key, data) {\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now()\n    });\n  }\n\n  // Clear cache when progress updates\n  clearCache() {\n    this.cache.clear();\n    console.log('DEBUG: Progress cache cleared');\n  }\n\n  // Get comprehensive progress overview\n  async getProgressOverview() {\n    const cacheKey = 'overview';\n    const cached = this.getCachedData(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    try {\n      const response = await fetch(`${this.baseURL}/overview`, {\n        headers: {\n          'X-Session-ID': this.sessionId\n        }\n      });\n      \n      const data = await response.json();\n      if (data.success) {\n        this.setCachedData(cacheKey, data.progress);\n        return data.progress;\n      }\n      throw new Error(data.error || 'Failed to get progress overview');\n    } catch (error) {\n      console.error('Failed to get progress overview:', error);\n      throw error;\n    }\n  }\n\n  // Get detailed problem-by-problem progress\n  async getDetailedProgress() {\n    const cacheKey = 'detailed';\n    const cached = this.getCachedData(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    try {\n      const response = await fetch(`${this.baseURL}/detailed`, {\n        headers: {\n          'X-Session-ID': this.sessionId\n        }\n      });\n      \n      const data = await response.json();\n      if (data.success) {\n        this.setCachedData(cacheKey, data.problems);\n        return data.problems;\n      }\n      throw new Error(data.error || 'Failed to get detailed progress');\n    } catch (error) {\n      console.error('Failed to get detailed progress:', error);\n      throw error;\n    }\n  }\n\n  // Get user statistics\n  async getStats() {\n    try {\n      const response = await fetch(`${this.baseURL}/stats`, {\n        headers: {\n          'X-Session-ID': this.sessionId\n        }\n      });\n      \n      const data = await response.json();\n      if (data.success) {\n        return data.stats;\n      }\n      throw new Error(data.error || 'Failed to get stats');\n    } catch (error) {\n      console.error('Failed to get stats:', error);\n      throw error;\n    }\n  }\n\n  // Get leaderboard\n  async getLeaderboard(limit = 10) {\n    try {\n      const response = await fetch(`${this.baseURL}/leaderboard?limit=${limit}`);\n      const data = await response.json();\n      \n      if (data.success) {\n        return data.leaderboard;\n      }\n      throw new Error(data.error || 'Failed to get leaderboard');\n    } catch (error) {\n      console.error('Failed to get leaderboard:', error);\n      throw error;\n    }\n  }\n\n  // Send heartbeat to keep session active\n  async sendHeartbeat() {\n    try {\n      await fetch(`${this.baseURL}/heartbeat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Session-ID': this.sessionId\n        }\n      });\n    } catch (error) {\n      console.error('Heartbeat failed:', error);\n    }\n  }\n\n  // Record manual attempt (if needed)\n  async recordAttempt(problemId, problemNumericId, query, isCorrect, executionTimeMs, errorMessage = null, hintUsed = false, solutionViewed = false) {\n    try {\n      const response = await fetch(`${this.baseURL}/attempt`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Session-ID': this.sessionId\n        },\n        body: JSON.stringify({\n          problemId,\n          problemNumericId,\n          query,\n          isCorrect,\n          executionTimeMs,\n          errorMessage,\n          hintUsed,\n          solutionViewed\n        })\n      });\n      \n      const data = await response.json();\n      if (data.success) {\n        return data.attempt;\n      }\n      throw new Error(data.error || 'Failed to record attempt');\n    } catch (error) {\n      console.error('Failed to record attempt:', error);\n      throw error;\n    }\n  }\n}\n\nexport default new ProgressService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}