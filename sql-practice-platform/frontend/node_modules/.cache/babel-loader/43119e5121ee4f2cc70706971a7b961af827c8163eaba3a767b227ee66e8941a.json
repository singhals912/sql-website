{"ast":null,"code":"import { useAuth } from '../contexts/AuthContext';\nimport ProgressService from './progressService';\nclass HintService {\n  // Get headers with authentication\n  static getHeaders(token = null) {\n    const headers = {\n      'Content-Type': 'application/json',\n      'X-Session-ID': ProgressService.sessionId\n    };\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    return headers;\n  }\n\n  // Get hints for a problem\n  static async getHintsForProblem(problemId, token = null) {\n    try {\n      const response = await fetch(`${this.baseURL}/hints/problem/${problemId}`, {\n        headers: this.getHeaders(token)\n      });\n      const data = await response.json();\n      if (data.success) {\n        return data.hints;\n      } else {\n        throw new Error(data.error || 'Failed to fetch hints');\n      }\n    } catch (error) {\n      console.error('Error fetching hints:', error);\n      return [];\n    }\n  }\n\n  // Reveal a specific hint\n  static async revealHint(problemId, hintId, token = null) {\n    try {\n      const response = await fetch(`${this.baseURL}/hints/${hintId}/reveal`, {\n        method: 'POST',\n        headers: this.getHeaders(token),\n        body: JSON.stringify({\n          problemId\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        return data;\n      } else {\n        throw new Error(data.error || 'Failed to reveal hint');\n      }\n    } catch (error) {\n      console.error('Error revealing hint:', error);\n      throw error;\n    }\n  }\n\n  // Get hint usage for user\n  static async getHintUsage(problemId, token = null) {\n    try {\n      const response = await fetch(`${this.baseURL}/hints/usage/${problemId}`, {\n        headers: this.getHeaders(token)\n      });\n      const data = await response.json();\n      if (data.success) {\n        return data.usage;\n      } else {\n        return [];\n      }\n    } catch (error) {\n      console.error('Error fetching hint usage:', error);\n      return [];\n    }\n  }\n\n  // Get available hints for problem (without revealing content)\n  static async getAvailableHints(problemId, attemptCount = 0, token = null) {\n    try {\n      const response = await fetch(`${this.baseURL}/hints/available/${problemId}?attempts=${attemptCount}`, {\n        headers: this.getHeaders(token)\n      });\n      const data = await response.json();\n      if (data.success) {\n        return data.hints;\n      } else {\n        return [];\n      }\n    } catch (error) {\n      console.error('Error fetching available hints:', error);\n      return [];\n    }\n  }\n}\nHintService.baseURL = 'http://localhost:5001/api';\nexport default HintService;","map":{"version":3,"names":["useAuth","ProgressService","HintService","getHeaders","token","headers","sessionId","getHintsForProblem","problemId","response","fetch","baseURL","data","json","success","hints","Error","error","console","revealHint","hintId","method","body","JSON","stringify","getHintUsage","usage","getAvailableHints","attemptCount"],"sources":["/Users/ss/Downloads/Code/Vibe_coding/SQL_practice_website/sql-practice-platform/frontend/src/services/hintService.js"],"sourcesContent":["import { useAuth } from '../contexts/AuthContext';\nimport ProgressService from './progressService';\n\nclass HintService {\n  static baseURL = 'http://localhost:5001/api';\n\n  // Get headers with authentication\n  static getHeaders(token = null) {\n    const headers = {\n      'Content-Type': 'application/json',\n      'X-Session-ID': ProgressService.sessionId,\n    };\n\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    return headers;\n  }\n\n  // Get hints for a problem\n  static async getHintsForProblem(problemId, token = null) {\n    try {\n      const response = await fetch(`${this.baseURL}/hints/problem/${problemId}`, {\n        headers: this.getHeaders(token)\n      });\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        return data.hints;\n      } else {\n        throw new Error(data.error || 'Failed to fetch hints');\n      }\n    } catch (error) {\n      console.error('Error fetching hints:', error);\n      return [];\n    }\n  }\n\n  // Reveal a specific hint\n  static async revealHint(problemId, hintId, token = null) {\n    try {\n      const response = await fetch(`${this.baseURL}/hints/${hintId}/reveal`, {\n        method: 'POST',\n        headers: this.getHeaders(token),\n        body: JSON.stringify({ problemId })\n      });\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        return data;\n      } else {\n        throw new Error(data.error || 'Failed to reveal hint');\n      }\n    } catch (error) {\n      console.error('Error revealing hint:', error);\n      throw error;\n    }\n  }\n\n  // Get hint usage for user\n  static async getHintUsage(problemId, token = null) {\n    try {\n      const response = await fetch(`${this.baseURL}/hints/usage/${problemId}`, {\n        headers: this.getHeaders(token)\n      });\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        return data.usage;\n      } else {\n        return [];\n      }\n    } catch (error) {\n      console.error('Error fetching hint usage:', error);\n      return [];\n    }\n  }\n\n  // Get available hints for problem (without revealing content)\n  static async getAvailableHints(problemId, attemptCount = 0, token = null) {\n    try {\n      const response = await fetch(`${this.baseURL}/hints/available/${problemId}?attempts=${attemptCount}`, {\n        headers: this.getHeaders(token)\n      });\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        return data.hints;\n      } else {\n        return [];\n      }\n    } catch (error) {\n      console.error('Error fetching available hints:', error);\n      return [];\n    }\n  }\n}\n\nexport default HintService;"],"mappings":"AAAA,SAASA,OAAO,QAAQ,yBAAyB;AACjD,OAAOC,eAAe,MAAM,mBAAmB;AAE/C,MAAMC,WAAW,CAAC;EAGhB;EACA,OAAOC,UAAUA,CAACC,KAAK,GAAG,IAAI,EAAE;IAC9B,MAAMC,OAAO,GAAG;MACd,cAAc,EAAE,kBAAkB;MAClC,cAAc,EAAEJ,eAAe,CAACK;IAClC,CAAC;IAED,IAAIF,KAAK,EAAE;MACTC,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUD,KAAK,EAAE;IAC9C;IAEA,OAAOC,OAAO;EAChB;;EAEA;EACA,aAAaE,kBAAkBA,CAACC,SAAS,EAAEJ,KAAK,GAAG,IAAI,EAAE;IACvD,IAAI;MACF,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACC,OAAO,kBAAkBH,SAAS,EAAE,EAAE;QACzEH,OAAO,EAAE,IAAI,CAACF,UAAU,CAACC,KAAK;MAChC,CAAC,CAAC;MAEF,MAAMQ,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAElC,IAAID,IAAI,CAACE,OAAO,EAAE;QAChB,OAAOF,IAAI,CAACG,KAAK;MACnB,CAAC,MAAM;QACL,MAAM,IAAIC,KAAK,CAACJ,IAAI,CAACK,KAAK,IAAI,uBAAuB,CAAC;MACxD;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAO,EAAE;IACX;EACF;;EAEA;EACA,aAAaE,UAAUA,CAACX,SAAS,EAAEY,MAAM,EAAEhB,KAAK,GAAG,IAAI,EAAE;IACvD,IAAI;MACF,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACC,OAAO,UAAUS,MAAM,SAAS,EAAE;QACrEC,MAAM,EAAE,MAAM;QACdhB,OAAO,EAAE,IAAI,CAACF,UAAU,CAACC,KAAK,CAAC;QAC/BkB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEhB;QAAU,CAAC;MACpC,CAAC,CAAC;MAEF,MAAMI,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAElC,IAAID,IAAI,CAACE,OAAO,EAAE;QAChB,OAAOF,IAAI;MACb,CAAC,MAAM;QACL,MAAM,IAAII,KAAK,CAACJ,IAAI,CAACK,KAAK,IAAI,uBAAuB,CAAC;MACxD;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,aAAaQ,YAAYA,CAACjB,SAAS,EAAEJ,KAAK,GAAG,IAAI,EAAE;IACjD,IAAI;MACF,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACC,OAAO,gBAAgBH,SAAS,EAAE,EAAE;QACvEH,OAAO,EAAE,IAAI,CAACF,UAAU,CAACC,KAAK;MAChC,CAAC,CAAC;MAEF,MAAMQ,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAElC,IAAID,IAAI,CAACE,OAAO,EAAE;QAChB,OAAOF,IAAI,CAACc,KAAK;MACnB,CAAC,MAAM;QACL,OAAO,EAAE;MACX;IACF,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAO,EAAE;IACX;EACF;;EAEA;EACA,aAAaU,iBAAiBA,CAACnB,SAAS,EAAEoB,YAAY,GAAG,CAAC,EAAExB,KAAK,GAAG,IAAI,EAAE;IACxE,IAAI;MACF,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACC,OAAO,oBAAoBH,SAAS,aAAaoB,YAAY,EAAE,EAAE;QACpGvB,OAAO,EAAE,IAAI,CAACF,UAAU,CAACC,KAAK;MAChC,CAAC,CAAC;MAEF,MAAMQ,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAElC,IAAID,IAAI,CAACE,OAAO,EAAE;QAChB,OAAOF,IAAI,CAACG,KAAK;MACnB,CAAC,MAAM;QACL,OAAO,EAAE;MACX;IACF,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,OAAO,EAAE;IACX;EACF;AACF;AAlGMf,WAAW,CACRS,OAAO,GAAG,2BAA2B;AAmG9C,eAAeT,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}